(()=>{var e={272:(e,r,n)=>{var t={"./bB.png":743,"./bK.png":68,"./bN.png":602,"./bP.png":817,"./bQ.png":207,"./bR.png":993,"./wB.png":181,"./wK.png":902,"./wN.png":986,"./wP.png":998,"./wQ.png":178,"./wR.png":713};function o(e){var r=i(e);return n(r)}function i(e){if(!n.o(t,e)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t[e]}o.keys=function(){return Object.keys(t)},o.resolve=i,e.exports=o,o.id=272},768:()=>{!function(){"use strict";var e=window.jQuery,r="abcdefgh".split(""),n=b("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"),t={};function o(e,r,n){var t=0,o=!1,i=[],a=function(){t=0,o&&(o=!1,s())},s=function(){t=window.setTimeout(a,r),e.apply(n,i)};return function(e){i=arguments,t?o=!0:s()}}function i(){return"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".replace(/x/g,(function(e){return(16*Math.random()|0).toString(16)}))}function a(e){return JSON.parse(JSON.stringify(e))}function s(e){var r=e.split(".");return{major:parseInt(r[0],10),minor:parseInt(r[1],10),patch:parseInt(r[2],10)}}function c(e,r){for(var n in r)if(r.hasOwnProperty(n))for(var t="{"+n+"}",o=r[n];-1!==e.indexOf(t);)e=e.replace(t,o);return e}function u(e){return"string"==typeof e}function l(e){return"function"==typeof e}function p(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}function f(e){return"fast"===e||"slow"===e||!!p(e)&&e>=0}function d(e){if(!u(e))return!1;var r=e.split("-");return 2===r.length&&h(r[0])&&h(r[1])}function h(e){return u(e)&&-1!==e.search(/^[a-h][1-8]$/)}function g(e){if(!u(e))return!1;var r=(e=function(e){return e.replace(/8/g,"11111111").replace(/7/g,"1111111").replace(/6/g,"111111").replace(/5/g,"11111").replace(/4/g,"1111").replace(/3/g,"111").replace(/2/g,"11")}(e=e.replace(/ .+$/,""))).split("/");if(8!==r.length)return!1;for(var n=0;n<8;n++)if(8!==r[n].length||-1!==r[n].search(/[^kqrnbpKQRNBP1]/))return!1;return!0}function v(r){if(!e.isPlainObject(r))return!1;for(var n in r)if(r.hasOwnProperty(n)&&(!h(n)||(!u(t=r[n])||-1===t.search(/^[bw][KQRNBP]$/))))return!1;var t;return!0}function b(e){if(!g(e))return!1;for(var n,t=(e=e.replace(/ .+$/,"")).split("/"),o={},i=8,a=0;a<8;a++){for(var s=t[a].split(""),c=0,u=0;u<s.length;u++)-1!==s[u].search(/[1-8]/)?c+=parseInt(s[u],10):(o[r[c]+i]=(n=s[u]).toLowerCase()===n?"b"+n.toUpperCase():"w"+n.toUpperCase(),c+=1);i-=1}return o}function A(e){if(!v(e))return!1;for(var n,t="",o=8,i=0;i<8;i++){for(var a=0;a<8;a++){var s=r[a]+o;e.hasOwnProperty(s)?t+=(n=void 0,"w"===(n=e[s].split(""))[0]?n[1].toUpperCase():n[1].toLowerCase()):t+="1"}7!==i&&(t+="/"),o-=1}return function(e){return e.replace(/11111111/g,"8").replace(/1111111/g,"7").replace(/111111/g,"6").replace(/11111/g,"5").replace(/1111/g,"4").replace(/111/g,"3").replace(/11/g,"2")}(t)}function m(e,n,t){for(var o=function(e){for(var n=[],t=0;t<8;t++)for(var o=0;o<8;o++){var i=r[t]+(o+1);e!==i&&n.push({square:i,distance:(a=e,s=i,c=void 0,u=void 0,l=void 0,p=void 0,f=void 0,d=void 0,h=void 0,g=void 0,c=a.split(""),u=r.indexOf(c[0])+1,l=parseInt(c[1],10),p=s.split(""),f=r.indexOf(p[0])+1,d=parseInt(p[1],10),h=Math.abs(u-f),g=Math.abs(l-d),h>=g?h:g)})}var a,s,c,u,l,p,f,d,h,g;n.sort((function(e,r){return e.distance-r.distance}));var v=[];for(t=0;t<n.length;t++)v.push(n[t].square);return v}(t),i=0;i<o.length;i++){var a=o[i];if(e.hasOwnProperty(a)&&e[a]===n)return a}return!1}function w(e,r){var n=a(e);for(var t in r)if(r.hasOwnProperty(t)&&n.hasOwnProperty(t)){var o=n[t];delete n[t],n[r[t]]=o}return n}t.alpha="alpha-d2270",t.black="black-3c85d",t.board="board-b72b1",t.chessboard="chessboard-63f37",t.clearfix="clearfix-7da63",t.highlight1="highlight1-32417",t.highlight2="highlight2-9c5d2",t.notation="notation-322f9",t.numeric="numeric-fc462",t.piece="piece-417db",t.row="row-5277c",t.sparePieces="spare-pieces-7492f",t.sparePiecesBottom="spare-pieces-bottom-ae20f",t.sparePiecesTop="spare-pieces-top-4028b",t.square="square-55d63",t.white="white-1e1d7",window.Chessboard=function(E,y){if(!((window.$,e.fn&&e.fn.jquery&&(k="1.8.3",C=s(C=e.fn.jquery),k=s(k),1e5*C.major*1e5+1e5*C.minor+C.patch>=1e5*k.major*1e5+1e5*k.minor+k.patch))||(window.alert("Chessboard Error 1005: Unable to find a valid version of jQuery. Please include jQuery 1.8.3 or higher on the page\n\nExiting…"),0)))return null;var C,k,x=function(r){if(""===r)return window.alert("Chessboard Error 1001: The first argument to Chessboard() cannot be an empty string.\n\nExiting…"),!1;u(r)&&"#"!==r.charAt(0)&&(r="#"+r);var n=e(r);return 1!==n.length?(window.alert("Chessboard Error 1003: The first argument to Chessboard() must be the ID of a DOM node, an ID query selector, or a single DOM node.\n\nExiting…"),!1):n}(E);if(!x)return null;y=function(e){var r;return"black"!==e.orientation&&(e.orientation="white"),!1!==e.showNotation&&(e.showNotation=!0),!0!==e.draggable&&(e.draggable=!1),"trash"!==e.dropOffBoard&&(e.dropOffBoard="snapback"),!0!==e.sparePieces&&(e.sparePieces=!1),e.sparePieces&&(e.draggable=!0),e.hasOwnProperty("pieceTheme")&&(u(e.pieceTheme)||l(e.pieceTheme))||(e.pieceTheme="img/chesspieces/wikipedia/{piece}.png"),f(e.appearSpeed)||(e.appearSpeed=200),f(e.moveSpeed)||(e.moveSpeed=200),f(e.snapbackSpeed)||(e.snapbackSpeed=60),f(e.snapSpeed)||(e.snapSpeed=30),f(e.trashSpeed)||(e.trashSpeed=100),p(r=e.dragThrottleRate)&&r>=1||(e.dragThrottleRate=20),e}(y=function(r){return"start"===r?r={position:a(n)}:g(r)?r={position:b(r)}:v(r)&&(r={position:a(r)}),e.isPlainObject(r)||(r={}),r}(y));var B=null,P=null,S=null,T=null,_={},O=2,q="white",I={},R=null,N=null,L=null,j=!1,D={},Q={},M={},U=16;function K(e,r,n){if(!0===y.hasOwnProperty("showErrors")&&!1!==y.showErrors){var t="Chessboard Error "+e+": "+r;return"console"===y.showErrors&&"object"==typeof console&&"function"==typeof console.log?(console.log(t),void(arguments.length>=2&&console.log(n))):"alert"===y.showErrors?(n&&(t+="\n\n"+JSON.stringify(n)),void window.alert(t)):void(l(y.showErrors)&&y.showErrors(e,r,n))}}function $(e){return l(y.pieceTheme)?y.pieceTheme(e):u(y.pieceTheme)?c(y.pieceTheme,{piece:e}):(K(8272,"Unable to build image source for config.pieceTheme."),"")}function z(e,r,n){var o='<img src="'+$(e)+'" ';return u(n)&&""!==n&&(o+='id="'+n+'" '),o+='alt="" class="{piece}" data-piece="'+e+'" style="width:'+U+"px;height:"+U+"px;",r&&(o+="display:none;"),c(o+='" />',t)}function W(e){var r=["wK","wQ","wR","wB","wN","wP"];"black"===e&&(r=["bK","bQ","bR","bB","bN","bP"]);for(var n="",t=0;t<r.length;t++)n+=z(r[t],!1,D[r[t]]);return n}function Y(r,n,o,a){var s=e("#"+Q[r]),c=s.offset(),u=e("#"+Q[n]),p=u.offset(),f=i();e("body").append(z(o,!0,f));var d=e("#"+f);d.css({display:"",position:"absolute",top:c.top,left:c.left}),s.find("."+t.piece).remove();var h={duration:y.moveSpeed,complete:function(){u.append(z(o)),d.remove(),l(a)&&a()}};d.animate(p,h)}function Z(r,n,o){var a=e("#"+D[r]).offset(),s=e("#"+Q[n]),c=s.offset(),u=i();e("body").append(z(r,!0,u));var p=e("#"+u);p.css({display:"",position:"absolute",left:a.left,top:a.top});var f={duration:y.moveSpeed,complete:function(){s.find("."+t.piece).remove(),s.append(z(r)),p.remove(),l(o)&&o()}};p.animate(c,f)}function F(r,n,o){if(0!==r.length)for(var i=0,s=0;s<r.length;s++){var c=r[s];"clear"===c.type?e("#"+Q[c.square]+" ."+t.piece).fadeOut(y.trashSpeed,u):"add"!==c.type||y.sparePieces?"add"===c.type&&y.sparePieces?Z(c.piece,c.square,u):"move"===c.type&&Y(c.source,c.destination,c.piece,u):e("#"+Q[c.square]).append(z(c.piece,!0)).find("."+t.piece).fadeIn(y.appearSpeed,u)}function u(){(i+=1)===r.length&&(X(),l(y.onMoveEnd)&&y.onMoveEnd(a(n),a(o)))}}function H(e,r){e=a(e),r=a(r);var n=[],t={};for(var o in r)r.hasOwnProperty(o)&&e.hasOwnProperty(o)&&e[o]===r[o]&&(delete e[o],delete r[o]);for(o in r)if(r.hasOwnProperty(o)){var i=m(e,r[o],o);i&&(n.push({type:"move",source:i,destination:o,piece:r[o]}),delete e[i],delete r[o],t[o]=!0)}for(o in r)r.hasOwnProperty(o)&&(n.push({type:"add",square:o,piece:r[o]}),delete r[o]);for(o in e)e.hasOwnProperty(o)&&(t.hasOwnProperty(o)||(n.push({type:"clear",square:o,piece:e[o]}),delete e[o]));return n}function X(){for(var r in B.find("."+t.piece).remove(),I)I.hasOwnProperty(r)&&e("#"+Q[r]).append(z(I[r]))}function G(){B.html(function(e){"black"!==e&&(e="white");var n="",o=a(r),i=8;"black"===e&&(o.reverse(),i=1);for(var s="white",u=0;u<8;u++){n+='<div class="{row}">';for(var l=0;l<8;l++){var p=o[l]+i;n+='<div class="{square} '+t[s]+" square-"+p+'" style="width:'+U+"px;height:"+U+'px;" id="'+Q[p]+'" data-square="'+p+'">',y.showNotation&&(("white"===e&&1===i||"black"===e&&8===i)&&(n+='<div class="{notation} {alpha}">'+o[l]+"</div>"),0===l&&(n+='<div class="{notation} {numeric}">'+i+"</div>")),n+="</div>",s="white"===s?"black":"white"}n+='<div class="{clearfix}"></div></div>',s="white"===s?"black":"white","white"===e?i-=1:i+=1}return c(n,t)}(q,y.showNotation)),X(),y.sparePieces&&("white"===q?(S.html(W("black")),T.html(W("white"))):(S.html(W("white")),T.html(W("black"))))}function J(e){var r=a(I),n=a(e);A(r)!==A(n)&&(l(y.onChange)&&y.onChange(r,n),I=e)}function V(e,r){for(var n in M)if(M.hasOwnProperty(n)){var t=M[n];if(e>=t.left&&e<t.left+U&&r>=t.top&&r<t.top+U)return n}return"offboard"}function ee(){B.find("."+t.square).removeClass(t.highlight1+" "+t.highlight2)}function re(){ee();var e=a(I);delete e[L],J(e),X(),P.fadeOut(y.trashSpeed),j=!1}function ne(r,n,o,i){l(y.onDragStart)&&!1===y.onDragStart(r,n,a(I),q)||(j=!0,R=n,L=r,N="spare"===r?"offboard":r,function(){for(var r in M={},Q)Q.hasOwnProperty(r)&&(M[r]=e("#"+Q[r]).offset())}(),P.attr("src",$(n)).css({display:"",position:"absolute",left:o-U/2,top:i-U/2}),"spare"!==r&&e("#"+Q[r]).addClass(t.highlight1).find("."+t.piece).css("display","none"))}function te(r,n){P.css({left:r-U/2,top:n-U/2});var o=V(r,n);o!==N&&(h(N)&&e("#"+Q[N]).removeClass(t.highlight2),h(o)&&e("#"+Q[o]).addClass(t.highlight2),l(y.onDragMove)&&y.onDragMove(o,N,L,R,a(I),q),N=o)}function oe(r){var n="drop";if("offboard"===r&&"snapback"===y.dropOffBoard&&(n="snapback"),"offboard"===r&&"trash"===y.dropOffBoard&&(n="trash"),l(y.onDrop)){var t=a(I);"spare"===L&&h(r)&&(t[r]=R),h(L)&&"offboard"===r&&delete t[L],h(L)&&h(r)&&(delete t[L],t[r]=R);var o=a(I),i=y.onDrop(L,r,R,t,o,q);"snapback"!==i&&"trash"!==i||(n=i)}"snapback"===n?function(){if("spare"!==L){ee();var r=e("#"+Q[L]).offset(),n={duration:y.snapbackSpeed,complete:function(){X(),P.css("display","none"),l(y.onSnapbackEnd)&&y.onSnapbackEnd(R,L,a(I),q)}};P.animate(r,n),j=!1}else re()}():"trash"===n?re():"drop"===n&&function(r){ee();var n=a(I);delete n[L],n[r]=R,J(n);var t=e("#"+Q[r]).offset(),o={duration:y.snapSpeed,complete:function(){X(),P.css("display","none"),l(y.onSnapEnd)&&y.onSnapEnd(L,r,R)}};P.animate(t,o),j=!1}(r)}function ie(e){e.preventDefault()}function ae(r){if(y.draggable){var n=e(this).attr("data-square");h(n)&&I.hasOwnProperty(n)&&ne(n,I[n],r.pageX,r.pageY)}}function se(r){if(y.draggable){var n=e(this).attr("data-square");h(n)&&I.hasOwnProperty(n)&&(r=r.originalEvent,ne(n,I[n],r.changedTouches[0].pageX,r.changedTouches[0].pageY))}}function ce(r){y.sparePieces&&ne("spare",e(this).attr("data-piece"),r.pageX,r.pageY)}function ue(r){y.sparePieces&&ne("spare",e(this).attr("data-piece"),(r=r.originalEvent).changedTouches[0].pageX,r.changedTouches[0].pageY)}_.clear=function(e){_.position({},e)},_.destroy=function(){x.html(""),P.remove(),x.unbind()},_.fen=function(){return _.position("fen")},_.flip=function(){return _.orientation("flip")},_.move=function(){if(0!==arguments.length){for(var e=!0,r={},n=0;n<arguments.length;n++)if(!1!==arguments[n])if(d(arguments[n])){var t=arguments[n].split("-");r[t[0]]=t[1]}else K(2826,"Invalid move passed to the move method.",arguments[n]);else e=!1;var o=w(I,r);return _.position(o,e),o}},_.orientation=function(e){return 0===arguments.length?q:"white"===e||"black"===e?(q=e,G(),q):"flip"===e?(q="white"===q?"black":"white",G(),q):void K(5482,"Invalid value passed to the orientation method.",e)},_.position=function(e,r){if(0===arguments.length)return a(I);if(u(e)&&"fen"===e.toLowerCase())return A(I);if(u(e)&&"start"===e.toLowerCase()&&(e=a(n)),g(e)&&(e=b(e)),v(e))if(!1!==r&&(r=!0),r){var t=H(I,e);F(t,I,e),J(e)}else J(e),X();else K(6482,"Invalid value passed to the position method.",e)},_.resize=function(){U=function(){var e=parseInt(x.width(),10);if(!e||e<=0)return 0;for(var r=e-1;r%8!=0&&r>0;)r-=1;return r/8}(),B.css("width",8*U+"px"),P.css({height:U,width:U}),y.sparePieces&&x.find("."+t.sparePieces).css("paddingLeft",U+O+"px"),G()},_.start=function(e){_.position("start",e)};var le=o((function(e){j&&te(e.pageX,e.pageY)}),y.dragThrottleRate),pe=o((function(e){j&&(e.preventDefault(),te(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}),y.dragThrottleRate);function fe(e){j&&oe(V(e.pageX,e.pageY))}function de(e){j&&oe(V(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}function he(r){if(!j&&l(y.onMouseoverSquare)){var n=e(r.currentTarget).attr("data-square");if(h(n)){var t=!1;I.hasOwnProperty(n)&&(t=I[n]),y.onMouseoverSquare(n,t,a(I),q)}}}function ge(r){if(!j&&l(y.onMouseoutSquare)){var n=e(r.currentTarget).attr("data-square");if(h(n)){var t=!1;I.hasOwnProperty(n)&&(t=I[n]),y.onMouseoutSquare(n,t,a(I),q)}}}return q=y.orientation,y.hasOwnProperty("position")&&("start"===y.position?I=a(n):g(y.position)?I=b(y.position):v(y.position)?I=a(y.position):K(7263,"Invalid value passed to config.position.",y.position)),function(){var n,o;!function(){for(var e=0;e<r.length;e++)for(var n=1;n<=8;n++){var t=r[e]+n;Q[t]=t+"-"+i()}var o="KQRNBP".split("");for(e=0;e<o.length;e++){var a="w"+o[e],s="b"+o[e];D[a]=a+"-"+i(),D[s]=s+"-"+i()}}(),x.html((o='<div class="{chessboard}">',(n=y.sparePieces)&&(o+='<div class="{sparePieces} {sparePiecesTop}"></div>'),o+='<div class="{board}"></div>',n&&(o+='<div class="{sparePieces} {sparePiecesBottom}"></div>'),c(o+="</div>",t))),B=x.find("."+t.board),y.sparePieces&&(S=x.find("."+t.sparePiecesTop),T=x.find("."+t.sparePiecesBottom));var a=i();e("body").append(z("wP",!0,a)),P=e("#"+a),O=parseInt(B.css("borderLeftWidth"),10),_.resize()}(),function(){e("body").on("mousedown mousemove","."+t.piece,ie),B.on("mousedown","."+t.square,ae),x.on("mousedown","."+t.sparePieces+" ."+t.piece,ce),B.on("mouseenter","."+t.square,he).on("mouseleave","."+t.square,ge);var r=e(window);r.on("mousemove",le).on("mouseup",fe),"ontouchstart"in document.documentElement&&(B.on("touchstart","."+t.square,se),x.on("touchstart","."+t.sparePieces+" ."+t.piece,ue),r.on("touchmove",pe).on("touchend",de))}(),_},window.ChessBoard=window.Chessboard,window.Chessboard.fenToObj=b,window.Chessboard.objToFen=A}()},816:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),o=n.n(t),i=n(645),a=n.n(i)()(o());a.push([e.id,'/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n',"",{version:3,sources:["webpack://./css/chessboard-1.0.0.css"],names:[],mappings:"AAAA,yFAAyF;;AAEzF;EACE,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,kBAAkB;;EAElB,4CAA4C;EAC5C,2BAA2B;IACzB,yBAAyB;KACxB,wBAAwB;OACtB,sBAAsB;QACrB,qBAAqB;YACjB,iBAAiB;AAC7B;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,2DAA2D;EAC3D,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,QAAQ;EACR,SAAS;AACX",sourcesContent:['/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n'],sourceRoot:""}]);const s=a},238:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),o=n.n(t),i=n(645),a=n.n(i)()(o());a.push([e.id,"html {\n  height: 100%;\n}\n\nbody {\n  /* background-color: #262421 */\n  /* background: rgb(15, 15, 15);\n  background: linear-gradient(95deg, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%); */\n\n  background: rgb(15, 15, 15);\n  background: linear-gradient(to bottom, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%);\n  height: 100%;\n  margin: 0;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  font: serif;\n}\n\n#htmlBoard {\n  width: 35%;\n  margin: 0 auto;\n  /* margin-top: 100px; */\n}\n\n#restart-btn{\n  /* background-color: white */\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;  \n  display:block;\n  width: 300px;\n  margin: 0 auto;\n  /* margin-top: 20px; */\n  /* background-color: #262421; */\n  background-color: #262524;\n  color: #999;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-bottom: 15px;\n}\n\n\n#restart-btn:hover{\n  background: #313030;\n}\n\n.interface{\n  /* used padding, instead of margin as I don't want website to be scrollable */\n  padding-top: 100px;\n}\n\n\n.board-container{\n  display: flex;\n}\n\n.player-turn-text{\n  color: white;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./css/main.css"],names:[],mappings:"AAAA;EACE,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B;kHACgH;;EAEhH,2BAA2B;EAC3B,iHAAiH;EACjH,YAAY;EACZ,SAAS;EACT,4BAA4B;EAC5B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,UAAU;EACV,cAAc;EACd,uBAAuB;AACzB;;AAEA;EACE,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,cAAc;EACd,sBAAsB;EACtB,+BAA+B;EAC/B,yBAAyB;EACzB,WAAW;EACX,SAAS;EACT,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;;AAGA;EACE,mBAAmB;AACrB;;AAEA;EACE,6EAA6E;EAC7E,kBAAkB;AACpB;;;AAGA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["html {\n  height: 100%;\n}\n\nbody {\n  /* background-color: #262421 */\n  /* background: rgb(15, 15, 15);\n  background: linear-gradient(95deg, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%); */\n\n  background: rgb(15, 15, 15);\n  background: linear-gradient(to bottom, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%);\n  height: 100%;\n  margin: 0;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  font: serif;\n}\n\n#htmlBoard {\n  width: 35%;\n  margin: 0 auto;\n  /* margin-top: 100px; */\n}\n\n#restart-btn{\n  /* background-color: white */\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;  \n  display:block;\n  width: 300px;\n  margin: 0 auto;\n  /* margin-top: 20px; */\n  /* background-color: #262421; */\n  background-color: #262524;\n  color: #999;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-bottom: 15px;\n}\n\n\n#restart-btn:hover{\n  background: #313030;\n}\n\n.interface{\n  /* used padding, instead of margin as I don't want website to be scrollable */\n  padding-top: 100px;\n}\n\n\n.board-container{\n  display: flex;\n}\n\n.player-turn-text{\n  color: white;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},537:e=>{"use strict";e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}},743:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bB.png"},68:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bK.png"},602:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bN.png"},817:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bP.png"},207:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bQ.png"},993:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/bR.png"},181:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wB.png"},902:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wK.png"},986:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wN.png"},998:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wP.png"},178:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wQ.png"},713:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>t});const t=n.p+"img/chesspieces/wikipedia/wR.png"},379:e=>{"use strict";var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],u=t.base?c[0]+t.base:c[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var f=n(p),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)r[f].references++,r[f].updater(d);else{var h=o(d,t);t.byIndex=s,r.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,r){var n=r.domAPI(r);return n.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,o){var i=t(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);r[s].references--}for(var c=t(e,o),u=0;u<i.length;u++){var l=n(i[u]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}i=c}}},569:e=>{"use strict";var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,n)=>{"use strict";e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},795:e=>{"use strict";e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{"use strict";e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={id:t,exports:{}};return e[t](i,i.exports,n),i.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var r=n.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{"use strict";var e=n(379),r=n.n(e),t=n(795),o=n.n(t),i=n(569),a=n.n(i),s=n(565),c=n.n(s),u=n(216),l=n.n(u),p=n(589),f=n.n(p),d=n(816),h={};h.styleTagTransform=f(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),r()(d.Z,h),d.Z&&d.Z.locals&&d.Z.locals,n.p,n(768);const g="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",v=["1-0","0-1","1/2-1/2","*"],b={b:[16,32,17,15],w:[-16,-32,-17,-15]},A={n:[-18,-33,-31,-14,18,33,31,14],b:[-17,-15,17,15],r:[-16,1,16,-1],q:[-17,-16,-15,1,17,16,15,-1],k:[-17,-16,-15,1,17,16,15,-1]},m=[20,0,0,0,0,0,0,24,0,0,0,0,0,0,20,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,24,24,24,24,24,24,56,0,56,24,24,24,24,24,24,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,20,0,0,0,0,0,0,24,0,0,0,0,0,0,20],w=[17,0,0,0,0,0,0,16,0,0,0,0,0,0,15,0,0,17,0,0,0,0,0,16,0,0,0,0,0,15,0,0,0,0,17,0,0,0,0,16,0,0,0,0,15,0,0,0,0,0,0,17,0,0,0,16,0,0,0,15,0,0,0,0,0,0,0,0,17,0,0,16,0,0,15,0,0,0,0,0,0,0,0,0,0,17,0,16,0,15,0,0,0,0,0,0,0,0,0,0,0,0,17,16,15,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-15,-16,-17,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,-16,0,-17,0,0,0,0,0,0,0,0,0,0,-15,0,0,-16,0,0,-17,0,0,0,0,0,0,0,0,-15,0,0,0,-16,0,0,0,-17,0,0,0,0,0,0,-15,0,0,0,0,-16,0,0,0,0,-17,0,0,0,0,-15,0,0,0,0,0,-16,0,0,0,0,0,-17,0,0,-15,0,0,0,0,0,0,-16,0,0,0,0,0,0,-17],E={p:0,n:1,b:2,r:3,q:4,k:5},y={NORMAL:1,CAPTURE:2,BIG_PAWN:4,EP_CAPTURE:8,PROMOTION:16,KSIDE_CASTLE:32,QSIDE_CASTLE:64},C={a8:0,b8:1,c8:2,d8:3,e8:4,f8:5,g8:6,h8:7,a7:16,b7:17,c7:18,d7:19,e7:20,f7:21,g7:22,h7:23,a6:32,b6:33,c6:34,d6:35,e6:36,f6:37,g6:38,h6:39,a5:48,b5:49,c5:50,d5:51,e5:52,f5:53,g5:54,h5:55,a4:64,b4:65,c4:66,d4:67,e4:68,f4:69,g4:70,h4:71,a3:80,b3:81,c3:82,d3:83,e3:84,f3:85,g3:86,h3:87,a2:96,b2:97,c2:98,d2:99,e2:100,f2:101,g2:102,h2:103,a1:112,b1:113,c1:114,d1:115,e1:116,f1:117,g1:118,h1:119},k={w:[{square:C.a1,flag:y.QSIDE_CASTLE},{square:C.h1,flag:y.KSIDE_CASTLE}],b:[{square:C.a8,flag:y.QSIDE_CASTLE},{square:C.h8,flag:y.KSIDE_CASTLE}]};function x(e){var r=e.charAt(0);if(r>="a"&&r<="h"){if(e.match(/[a-h]\d.*[a-h]\d/))return;return L}return"o"===(r=r.toLowerCase())?j:r}function B(e){return e.replace(/=/,"").replace(/[+#]?[?!]*$/,"")}function P(e){return e>>4}function S(e){return 15&e}function T(e){var r=S(e),n=P(e);return"abcdefgh".substring(r,r+1)+"87654321".substring(n,n+1)}function _(e){return e===R?I:R}function O(e){var r=e instanceof Array?[]:{};for(var n in e)r[n]="object"==typeof n?O(e[n]):e[n];return r}function q(e){return e.replace(/^\s+|\s+$/g,"")}const I="b",R="w",N=-1,L="p",j="k",D=(function(){for(var e=[],r=C.a8;r<=C.h1;r++)136&r?r+=7:e.push(T(r))}(),{NORMAL:"n",CAPTURE:"c",BIG_PAWN:"b",EP_CAPTURE:"e",PROMOTION:"p",KSIDE_CASTLE:"k",QSIDE_CASTLE:"q"});var Q=n(238),M={};M.styleTagTransform=f(),M.setAttributes=c(),M.insert=a().bind(null,"head"),M.domAPI=o(),M.insertStyleElement=l(),r()(Q.Z,M),Q.Z&&Q.Z.locals&&Q.Z.locals;var U={p:[[100,100,100,100,105,100,100,100],[78,83,86,73,102,82,85,90],[7,29,21,44,40,31,44,7],[-17,16,-2,15,14,0,15,-13],[-26,3,10,9,6,1,0,-23],[-22,9,5,-11,-10,-2,3,-19],[-31,8,-7,-37,-36,-14,3,-31],[0,0,0,0,0,0,0,0]],n:[[-66,-53,-75,-75,-10,-55,-58,-70],[-3,-6,100,-36,4,62,-4,-14],[10,67,1,74,73,27,62,-2],[24,24,45,37,33,41,25,17],[-1,5,31,21,22,35,2,0],[-18,10,13,22,18,15,11,-14],[-23,-15,2,0,2,0,-23,-20],[-74,-23,-26,-24,-19,-35,-22,-69]],b:[[-59,-78,-82,-76,-23,-107,-37,-50],[-11,20,35,-42,-39,31,2,-22],[-9,39,-32,41,52,-10,28,-14],[25,17,20,34,26,25,15,10],[13,10,17,23,17,16,0,7],[14,25,24,15,8,25,20,15],[19,20,11,6,7,6,20,16],[-7,2,-15,-12,-14,-15,-10,-10]],r:[[35,29,33,4,37,33,56,50],[55,29,56,67,55,62,34,60],[19,35,28,33,45,27,25,15],[0,5,16,13,18,-4,-9,-6],[-28,-35,-16,-21,-13,-29,-46,-30],[-42,-28,-42,-25,-25,-35,-26,-46],[-53,-38,-31,-26,-29,-43,-44,-53],[-30,-24,-18,5,-2,-18,-31,-32]],q:[[6,1,-8,-104,69,24,88,26],[14,32,60,-10,20,76,57,24],[-2,43,32,60,72,63,43,2],[1,-16,22,17,25,20,-13,-6],[-14,-15,-2,-5,-1,-10,-20,-22],[-30,-6,-13,-11,-16,-11,-16,-27],[-36,-18,0,-19,-15,-15,-21,-38],[-39,-30,-31,-13,-31,-36,-34,-42]],k:[[4,54,47,-99,-99,60,83,-62],[-32,10,55,56,56,55,10,3],[-62,12,-57,44,-67,28,37,-31],[-55,50,11,-4,-19,13,0,-49],[-55,-43,-52,-28,-51,-47,-8,-50],[-47,-42,-43,-79,-64,-32,-29,-32],[-4,3,-14,-50,-57,-18,13,4],[17,30,-3,-14,6,-1,40,18]],k_e:[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]]};function K(e,r){let n=0;if(e.in_checkmate()){if("w"===r)return-(10**10);if("b"===r)return 10**10}return e.in_draw()||e.in_threefold_repetition()||e.in_stalemate()?0:(e.in_check()&&("w"===r&&(n-=50),"b"===r&&(n+=50)),console.log(e.fen()),n)}U.p.slice().reverse(),U.n.slice().reverse(),U.b.slice().reverse(),U.r.slice().reverse(),U.q.slice().reverse(),U.k.slice().reverse(),U.k_e.slice().reverse(),(z=n(272)).keys().map(z);var z,W=null,Y=new function(e){var r=new Array(128),n={w:N,b:N},t=R,o={w:0,b:0},i=N,a=0,s=1,c=[],u={},l={};function p(e){void 0===e&&(e=!1),r=new Array(128),n={w:N,b:N},t=R,o={w:0,b:0},i=N,a=0,s=1,c=[],e||(u={}),l={},K(M())}function f(){for(var e=[],r={},n=function(e){e in l&&(r[e]=l[e])};c.length>0;)e.push(ne());for(n(M());e.length>0;)re(e.pop()),n(M());l=r}function d(){h(g)}function h(e,r){void 0===r&&(r=!1);var n=e.split(/\s+/),c=n[0],u=0;if(!Q(e).valid)return!1;p(r);for(var l=0;l<c.length;l++){var f=c.charAt(l);if("/"===f)u+=8;else if(-1!=="0123456789".indexOf(f))u+=parseInt(f,10);else{var d=f<"a"?R:I;z({type:f.toLowerCase(),color:d},T(u)),u++}}return t=n[1],n[2].indexOf("K")>-1&&(o.w|=y.KSIDE_CASTLE),n[2].indexOf("Q")>-1&&(o.w|=y.QSIDE_CASTLE),n[2].indexOf("k")>-1&&(o.b|=y.KSIDE_CASTLE),n[2].indexOf("q")>-1&&(o.b|=y.QSIDE_CASTLE),i="-"===n[3]?N:C[n[3]],a=parseInt(n[4],10),s=parseInt(n[5],10),K(M()),!0}function Q(e){var r=e.split(/\s+/);if(6!==r.length)return{valid:!1,error_number:1,error:"FEN string must contain six space-delimited fields."};if(isNaN(parseInt(r[5]))||parseInt(r[5],10)<=0)return{valid:!1,error_number:2,error:"6th field (move number) must be a positive integer."};if(isNaN(parseInt(r[4]))||parseInt(r[4],10)<0)return{valid:!1,error_number:3,error:"5th field (half move counter) must be a non-negative integer."};if(!/^(-|[abcdefgh][36])$/.test(r[3]))return{valid:!1,error_number:4,error:"4th field (en-passant square) is invalid."};if(!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(r[2]))return{valid:!1,error_number:5,error:"3rd field (castling availability) is invalid."};if(!/^(w|b)$/.test(r[1]))return{valid:!1,error_number:6,error:"2nd field (side to move) is invalid."};var n=r[0].split("/");if(8!==n.length)return{valid:!1,error_number:7,error:"1st field (piece positions) does not contain 8 '/'-delimited rows."};for(var t=0;t<n.length;t++){for(var o=0,i=!1,a=0;a<n[t].length;a++)if(isNaN(n[t][a])){if(!/^[prnbqkPRNBQK]$/.test(n[t][a]))return{valid:!1,error_number:9,error:"1st field (piece positions) is invalid [invalid piece]."};o+=1,i=!1}else{if(i)return{valid:!1,error_number:8,error:"1st field (piece positions) is invalid [consecutive numbers]."};o+=parseInt(n[t][a],10),i=!0}if(8!==o)return{valid:!1,error_number:10,error:"1st field (piece positions) is invalid [row too large]."}}return"3"==r[3][1]&&"w"==r[1]||"6"==r[3][1]&&"b"==r[1]?{valid:!1,error_number:11,error:"Illegal en-passant square"}:{valid:!0,error_number:0,error:"No errors."}}function M(){for(var e=0,n="",c=C.a8;c<=C.h1;c++){if(null==r[c])e++;else{e>0&&(n+=e,e=0);var u=r[c].color,l=r[c].type;n+=u===R?l.toUpperCase():l.toLowerCase()}c+1&136&&(e>0&&(n+=e),c!==C.h1&&(n+="/"),e=0,c+=8)}var p="";o[R]&y.KSIDE_CASTLE&&(p+="K"),o[R]&y.QSIDE_CASTLE&&(p+="Q"),o[I]&y.KSIDE_CASTLE&&(p+="k"),o[I]&y.QSIDE_CASTLE&&(p+="q"),p=p||"-";var f=i===N?"-":T(i);return[n,t,p,f,a,s].join(" ")}function U(e){for(var r=0;r<e.length;r+=2)"string"==typeof e[r]&&"string"==typeof e[r+1]&&(u[e[r]]=e[r+1]);return u}function K(e){c.length>0||(e!==g?(u.SetUp="1",u.FEN=e):(delete u.SetUp,delete u.FEN))}function $(e){var n=r[C[e]];return n?{type:n.type,color:n.color}:null}function z(e,t){if(!("type"in e)||!("color"in e))return!1;if(-1==="pnbrqkPNBRQK".indexOf(e.type.toLowerCase()))return!1;if(!(t in C))return!1;var o=C[t];return(e.type!=j||n[e.color]==N||n[e.color]==o)&&(r[o]={type:e.type,color:e.color},e.type===j&&(n[e.color]=o),K(M()),!0)}function W(e,r,n,o,i){var a={color:t,from:r,to:n,flags:o,piece:e[r].type};return i&&(a.flags|=y.PROMOTION,a.promotion=i),e[n]?a.captured=e[n].type:o&y.EP_CAPTURE&&(a.captured=L),a}function Y(e){function a(e,r,n,t,o){if(e[n].type!==L||0!==P(t)&&7!==P(t))r.push(W(e,n,t,o));else for(var i=["q","r","b","n"],a=0,s=i.length;a<s;a++)r.push(W(e,n,t,o,i[a]))}var s=[],c=t,u=_(c),l={b:1,w:6},p=C.a8,f=C.h1,d=!1,h=void 0===e||!("legal"in e)||e.legal,g=void 0===e||!("piece"in e)||"string"!=typeof e.piece||e.piece.toLowerCase();if(void 0!==e&&"square"in e){if(!(e.square in C))return[];p=f=C[e.square],d=!0}for(var v=p;v<=f;v++)if(136&v)v+=7;else{var m=r[v];if(null!=m&&m.color===c)if(m.type!==L||!0!==g&&g!==L){if(!0===g||g===m.type)for(var w=0,E=A[m.type].length;w<E;w++){var k=A[m.type][w];for(x=v;!(136&(x+=k));){if(null!=r[x]){if(r[x].color===c)break;a(r,s,v,x,y.CAPTURE);break}if(a(r,s,v,x,y.NORMAL),"n"===m.type||"k"===m.type)break}}}else{var x=v+b[c][0];if(null==r[x]){a(r,s,v,x,y.NORMAL);x=v+b[c][1];l[c]===P(v)&&null==r[x]&&a(r,s,v,x,y.BIG_PAWN)}for(w=2;w<4;w++)136&(x=v+b[c][w])||(null!=r[x]&&r[x].color===u?a(r,s,v,x,y.CAPTURE):x===i&&a(r,s,v,i,y.EP_CAPTURE))}}if(!(!0!==g&&g!==j||d&&f!==n[c])){if(o[c]&y.KSIDE_CASTLE){var B=(S=n[c])+2;null!=r[S+1]||null!=r[B]||F(u,n[c])||F(u,S+1)||F(u,B)||a(r,s,n[c],B,y.KSIDE_CASTLE)}var S;if(o[c]&y.QSIDE_CASTLE)B=(S=n[c])-2,null!=r[S-1]||null!=r[S-2]||null!=r[S-3]||F(u,n[c])||F(u,S-1)||F(u,B)||a(r,s,n[c],B,y.QSIDE_CASTLE)}if(!h)return s;var T=[];for(v=0,E=s.length;v<E;v++)re(s[v]),H(c)||T.push(s[v]),ne();return T}function Z(e,r){var n="";if(e.flags&y.KSIDE_CASTLE)n="O-O";else if(e.flags&y.QSIDE_CASTLE)n="O-O-O";else{if(e.piece!==L){var t=function(e,r){for(var n=e.from,t=e.to,o=e.piece,i=0,a=0,s=0,c=0,u=r.length;c<u;c++){var l=r[c].from,p=r[c].to;o===r[c].piece&&n!==l&&t===p&&(i++,P(n)===P(l)&&a++,S(n)===S(l)&&s++)}return i>0?a>0&&s>0?T(n):s>0?T(n).charAt(1):T(n).charAt(0):""}(e,r);n+=e.piece.toUpperCase()+t}e.flags&(y.CAPTURE|y.EP_CAPTURE)&&(e.piece===L&&(n+=T(e.from)[0]),n+="x"),n+=T(e.to),e.flags&y.PROMOTION&&(n+="="+e.promotion.toUpperCase())}return re(e),X()&&(G()?n+="#":n+="+"),ne(),n}function F(e,n){for(var t=C.a8;t<=C.h1;t++)if(136&t)t+=7;else if(null!=r[t]&&r[t].color===e){var o=r[t],i=t-n,a=i+119;if(m[a]&1<<E[o.type]){if(o.type===L){if(i>0){if(o.color===R)return!0}else if(o.color===I)return!0;continue}if("n"===o.type||"k"===o.type)return!0;for(var s=w[a],c=t+s,u=!1;c!==n;){if(null!=r[c]){u=!0;break}c+=s}if(!u)return!0}}return!1}function H(e){return F(_(e),n[e])}function X(){return H(t)}function G(){return X()&&0===Y().length}function J(){return!X()&&0===Y().length}function V(){for(var e={},n=[],t=0,o=0,i=C.a8;i<=C.h1;i++)if(o=(o+1)%2,136&i)i+=7;else{var a=r[i];a&&(e[a.type]=a.type in e?e[a.type]+1:1,"b"===a.type&&n.push(o),t++)}if(2===t)return!0;if(3===t&&(1===e.b||1===e.n))return!0;if(t===e.b+2){var s=0,c=n.length;for(i=0;i<c;i++)s+=n[i];if(0===s||s===c)return!0}return!1}function ee(){for(var e=[],r={},n=!1;;){var t=ne();if(!t)break;e.push(t)}for(;;){var o=M().split(" ").slice(0,4).join(" ");if(r[o]=o in r?r[o]+1:1,r[o]>=3&&(n=!0),!e.length)break;re(e.pop())}return n}function re(e){var u=t,l=_(u);if(function(e){c.push({move:e,kings:{b:n.b,w:n.w},turn:t,castling:{b:o.b,w:o.w},ep_square:i,half_moves:a,move_number:s})}(e),r[e.to]=r[e.from],r[e.from]=null,e.flags&y.EP_CAPTURE&&(t===I?r[e.to-16]=null:r[e.to+16]=null),e.flags&y.PROMOTION&&(r[e.to]={type:e.promotion,color:u}),r[e.to].type===j){if(n[r[e.to].color]=e.to,e.flags&y.KSIDE_CASTLE){var p=e.to-1,f=e.to+1;r[p]=r[f],r[f]=null}else e.flags&y.QSIDE_CASTLE&&(p=e.to+1,f=e.to-2,r[p]=r[f],r[f]=null);o[u]=""}if(o[u])for(var d=0,h=k[u].length;d<h;d++)if(e.from===k[u][d].square&&o[u]&k[u][d].flag){o[u]^=k[u][d].flag;break}if(o[l])for(d=0,h=k[l].length;d<h;d++)if(e.to===k[l][d].square&&o[l]&k[l][d].flag){o[l]^=k[l][d].flag;break}i=e.flags&y.BIG_PAWN?"b"===t?e.to-16:e.to+16:N,e.piece===L||e.flags&(y.CAPTURE|y.EP_CAPTURE)?a=0:a++,t===I&&s++,t=_(t)}function ne(){var e=c.pop();if(null==e)return null;var u=e.move;n=e.kings,t=e.turn,o=e.castling,i=e.ep_square,a=e.half_moves,s=e.move_number;var l,p,f=t,d=_(t);if(r[u.from]=r[u.to],r[u.from].type=u.piece,r[u.to]=null,u.flags&y.CAPTURE)r[u.to]={type:u.captured,color:d};else if(u.flags&y.EP_CAPTURE){var h;h=f===I?u.to-16:u.to+16,r[h]={type:L,color:d}}return u.flags&(y.KSIDE_CASTLE|y.QSIDE_CASTLE)&&(u.flags&y.KSIDE_CASTLE?(l=u.to+1,p=u.to-1):u.flags&y.QSIDE_CASTLE&&(l=u.to-2,p=u.to+1),r[l]=r[p],r[p]=null),u}function te(e,r){for(var n=B(e),t=0;t<2;t++){if(1==t){if(!r)return null;var o=!1;if(u=n.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/)){var i=u[1],a=u[2],s=u[3],c=u[4];1==a.length&&(o=!0)}else{var u;(u=n.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/))&&(i=u[1],a=u[2],s=u[3],c=u[4],1==a.length&&(o=!0))}}for(var l=x(n),p=Y({legal:!0,piece:i||l}),f=0,d=p.length;f<d;f++)switch(t){case 0:if(n===B(Z(p[f],p)))return p[f];break;case 1:if(u){if(!(i&&i.toLowerCase()!=p[f].piece||C[a]!=p[f].from||C[s]!=p[f].to||c&&c.toLowerCase()!=p[f].promotion))return p[f];if(o){var h=T(p[f].from);if(!(i&&i.toLowerCase()!=p[f].piece||C[s]!=p[f].to||a!=h[0]&&a!=h[1]||c&&c.toLowerCase()!=p[f].promotion))return p[f]}}}}return null}function oe(e){var r=O(e);r.san=Z(r,Y({legal:!0})),r.to=T(r.to),r.from=T(r.from);var n="";for(var t in y)y[t]&r.flags&&(n+=D[t]);return r.flags=n,r}function ie(e){for(var r=Y({legal:!1}),n=0,o=t,i=0,a=r.length;i<a;i++)re(r[i]),H(o)||(e-1>0?n+=ie(e-1):n++),ne();return n}return h(g),{load:function(e){return h(e)},reset:function(){return d()},moves:function(e){for(var r=Y(e),n=[],t=0,o=r.length;t<o;t++)void 0!==e&&"verbose"in e&&e.verbose?n.push(oe(r[t])):n.push(Z(r[t],Y({legal:!0})));return n},in_check:function(){return X()},in_checkmate:function(){return G()},in_stalemate:function(){return J()},in_draw:function(){return a>=100||J()||V()||ee()},insufficient_material:function(){return V()},in_threefold_repetition:function(){return ee()},game_over:function(){return a>=100||G()||J()||V()||ee()},validate_fen:function(e){return Q(e)},fen:function(){return M()},board:function(){for(var e=[],n=[],t=C.a8;t<=C.h1;t++)null==r[t]?n.push(null):n.push({square:T(t),type:r[t].type,color:r[t].color}),t+1&136&&(e.push(n),n=[],t+=8);return e},pgn:function(e){var r="object"==typeof e&&"string"==typeof e.newline_char?e.newline_char:"\n",n="object"==typeof e&&"number"==typeof e.max_width?e.max_width:0,t=[],o=!1;for(var i in u)t.push("["+i+' "'+u[i]+'"]'+r),o=!0;o&&c.length&&t.push(r);for(var a=function(e){var r=l[M()];return void 0!==r&&(e=`${e}${e.length>0?" ":""}{${r}}`),e},p=[];c.length>0;)p.push(ne());var f=[],d="";for(0===p.length&&f.push(a(""));p.length>0;){d=a(d);var h=p.pop();c.length||"b"!==h.color?"w"===h.color&&(d.length&&f.push(d),d=s+"."):d=s+". ...",d=d+" "+Z(h,Y({legal:!0})),re(h)}if(d.length&&f.push(a(d)),void 0!==u.Result&&f.push(u.Result),0===n)return t.join("")+f.join(" ");var g=function(){return t.length>0&&" "===t[t.length-1]&&(t.pop(),!0)},v=function(e,o){for(var i of o.split(" "))if(i){if(e+i.length>n){for(;g();)e--;t.push(r),e=0}t.push(i),e+=i.length,t.push(" "),e++}return g()&&e--,e},b=0;for(i=0;i<f.length;i++)b+f[i].length>n&&f[i].includes("{")?b=v(b,f[i]):(b+f[i].length>n&&0!==i?(" "===t[t.length-1]&&t.pop(),t.push(r),b=0):0!==i&&(t.push(" "),b++),t.push(f[i]),b+=f[i].length);return t.join("")},load_pgn:function(e,r){var n=void 0!==r&&"sloppy"in r&&r.sloppy;function t(e){return e.replace(/\\/g,"\\")}e=e.trim();var o="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",i=new RegExp("^(\\[((?:"+t(o)+")|.)*\\])(?:\\s*"+t(o)+"){2}"),a=i.test(e)?i.exec(e)[1]:"";d();var s=function(e,r){for(var n="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",o={},i=e.split(new RegExp(t(n))),a="",s="",c=0;c<i.length;c++){var u=/^\s*\[([A-Za-z]+)\s*"(.*)"\s*\]\s*$/;a=i[c].replace(u,"$1"),s=i[c].replace(u,"$2"),q(a).length>0&&(o[a]=s)}return o}(a,r),c="";for(var p in s)"fen"===p.toLowerCase()&&(c=s[p]),U([p,s[p]]);if(n){if(c&&!h(c,!0))return!1}else if(!("1"!==s.SetUp||"FEN"in s&&h(s.FEN,!0)))return!1;for(var f=function(e){return`{${function(e){return Array.from(e).map((function(e){return e.charCodeAt(0)<128?e.charCodeAt(0).toString(16):encodeURIComponent(e).replace(/\%/g,"").toLowerCase()})).join("")}((e=e.replace(new RegExp(t(o),"g")," ")).slice(1,e.length-1))}}`},g=function(e){if(e.startsWith("{")&&e.endsWith("}"))return function(e){return 0==e.length?"":decodeURIComponent("%"+e.match(/.{1,2}/g).join("%"))}(e.slice(1,e.length-1))},b=e.replace(a,"").replace(new RegExp(`({[^}]*})+?|;([^${t(o)}]*)`,"g"),(function(e,r,n){return void 0!==r?f(r):" "+f(`{${n.slice(1)}}`)})).replace(new RegExp(t(o),"g")," "),A=/(\([^\(\)]+\))+?/g;A.test(b);)b=b.replace(A,"");var m=q(b=(b=(b=b.replace(/\d+\.(\.\.)?/g,"")).replace(/\.\.\./g,"")).replace(/\$\d+/g,"")).split(new RegExp(/\s+/));m=m.join(",").replace(/,,+/g,",").split(",");for(var w="",E="",y=0;y<m.length;y++){var C=g(m[y]);if(void 0===C)if(null==(w=te(m[y],n))){if(!(v.indexOf(m[y])>-1))return!1;E=m[y]}else E="",re(w);else l[M()]=C}return E&&Object.keys(u).length&&!u.Result&&U(["Result",E]),!0},header:function(){return U(arguments)},turn:function(){return t},move:function(e,r){var n=void 0!==r&&"sloppy"in r&&r.sloppy,t=null;if("string"==typeof e)t=te(e,n);else if("object"==typeof e)for(var o=Y(),i=0,a=o.length;i<a;i++)if(e.from===T(o[i].from)&&e.to===T(o[i].to)&&(!("promotion"in o[i])||e.promotion===o[i].promotion)){t=o[i];break}if(!t)return null;var s=oe(t);return re(t),s},undo:function(){var e=ne();return e?oe(e):null},clear:function(){return p()},put:function(e,r){return z(e,r)},get:function(e){return $(e)},ascii(){for(var e="   +------------------------+\n",n=C.a8;n<=C.h1;n++){if(0===S(n)&&(e+=" "+"87654321"[P(n)]+" |"),null==r[n])e+=" . ";else{var t=r[n].type;e+=" "+(r[n].color===R?t.toUpperCase():t.toLowerCase())+" "}n+1&136&&(e+="|\n",n+=8)}return(e+="   +------------------------+\n")+"     a  b  c  d  e  f  g  h"},remove:function(e){return function(e){var t=$(e);return r[C[e]]=null,t&&t.type===j&&(n[t.color]=N),K(M()),t}(e)},perft:function(e){return ie(e)},square_color:function(e){if(e in C){var r=C[e];return(P(r)+S(r))%2==0?"light":"dark"}return null},history:function(e){for(var r=[],n=[],t=(void 0!==e&&"verbose"in e&&e.verbose);c.length>0;)r.push(ne());for(;r.length>0;){var o=r.pop();t?n.push(oe(o)):n.push(Z(o,Y({legal:!0}))),re(o)}return n},get_comment:function(){return l[M()]},set_comment:function(e){l[M()]=e.replace("{","[").replace("}","]")},delete_comment:function(){var e=l[M()];return delete l[M()],e},get_comments:function(){return f(),Object.keys(l).map((function(e){return{fen:e,comment:l[e]}}))},delete_comments:function(){return f(),Object.keys(l).map((function(e){var r=l[e];return delete l[e],{fen:e,comment:r}}))}}};function Z(){$("#htmlBoard .square-55d63").css("background-color","")}function F(e){var r=$("#htmlBoard .square-"+e),n="#a9a9a9";r.hasClass("black-3c85d")&&(n="#696969"),r.css("background-color",n)}function H(){const e=Y.moves();if(0!==e.length){var r=Math.floor(Math.random()*e.length);Y.move(e[r]),W.position(Y.fen()),K(Y,Y.turn())}}var X={draggable:!0,position:"start",onDragStart:function(e,r){return!Y.game_over()&&!("w"===Y.turn()&&-1!==r.search(/^b/)||"b"===Y.turn()&&-1!==r.search(/^w/))&&void 0},onDrop:function(e,r){if(Z(),null===Y.move({from:e,to:r,promotion:"q"}))return"snapback";window.setTimeout(H,250)},onMouseoverSquare:function(e,r){var n=Y.moves({square:e,verbose:!0});if(0!==n.length){F(e);for(var t=0;t<n.length;t++)F(n[t].to)}},onMouseoutSquare:function(e,r){Z()},onSnapEnd:function(){K(Y,Y.turn()),W.position(Y.fen())}};W=Chessboard("htmlBoard",X)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,