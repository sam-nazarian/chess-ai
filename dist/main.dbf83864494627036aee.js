(()=>{var e={272:(e,n,r)=>{var t={"./bB.png":743,"./bK.png":68,"./bN.png":602,"./bP.png":817,"./bQ.png":207,"./bR.png":993,"./wB.png":181,"./wK.png":902,"./wN.png":986,"./wP.png":998,"./wQ.png":178,"./wR.png":713};function o(e){var n=a(e);return r(n)}function a(e){if(!r.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}o.keys=function(){return Object.keys(t)},o.resolve=a,e.exports=o,o.id=272},768:()=>{!function(){"use strict";var e=window.jQuery,n="abcdefgh".split(""),r=b("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"),t={};function o(e,n,r){var t=0,o=!1,a=[],i=function(){t=0,o&&(o=!1,s())},s=function(){t=window.setTimeout(i,n),e.apply(r,a)};return function(e){a=arguments,t?o=!0:s()}}function a(){return"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".replace(/x/g,(function(e){return(16*Math.random()|0).toString(16)}))}function i(e){return JSON.parse(JSON.stringify(e))}function s(e){var n=e.split(".");return{major:parseInt(n[0],10),minor:parseInt(n[1],10),patch:parseInt(n[2],10)}}function c(e,n){for(var r in n)if(n.hasOwnProperty(r))for(var t="{"+r+"}",o=n[r];-1!==e.indexOf(t);)e=e.replace(t,o);return e}function p(e){return"string"==typeof e}function u(e){return"function"==typeof e}function d(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}function l(e){return"fast"===e||"slow"===e||!!d(e)&&e>=0}function f(e){if(!p(e))return!1;var n=e.split("-");return 2===n.length&&h(n[0])&&h(n[1])}function h(e){return p(e)&&-1!==e.search(/^[a-h][1-8]$/)}function v(e){if(!p(e))return!1;var n=(e=function(e){return e.replace(/8/g,"11111111").replace(/7/g,"1111111").replace(/6/g,"111111").replace(/5/g,"11111").replace(/4/g,"1111").replace(/3/g,"111").replace(/2/g,"11")}(e=e.replace(/ .+$/,""))).split("/");if(8!==n.length)return!1;for(var r=0;r<8;r++)if(8!==n[r].length||-1!==n[r].search(/[^kqrnbpKQRNBP1]/))return!1;return!0}function g(n){if(!e.isPlainObject(n))return!1;for(var r in n)if(n.hasOwnProperty(r)&&(!h(r)||(!p(t=n[r])||-1===t.search(/^[bw][KQRNBP]$/))))return!1;var t;return!0}function b(e){if(!v(e))return!1;for(var r,t=(e=e.replace(/ .+$/,"")).split("/"),o={},a=8,i=0;i<8;i++){for(var s=t[i].split(""),c=0,p=0;p<s.length;p++)-1!==s[p].search(/[1-8]/)?c+=parseInt(s[p],10):(o[n[c]+a]=(r=s[p]).toLowerCase()===r?"b"+r.toUpperCase():"w"+r.toUpperCase(),c+=1);a-=1}return o}function w(e){if(!g(e))return!1;for(var r,t="",o=8,a=0;a<8;a++){for(var i=0;i<8;i++){var s=n[i]+o;e.hasOwnProperty(s)?t+=(r=void 0,"w"===(r=e[s].split(""))[0]?r[1].toUpperCase():r[1].toLowerCase()):t+="1"}7!==a&&(t+="/"),o-=1}return function(e){return e.replace(/11111111/g,"8").replace(/1111111/g,"7").replace(/111111/g,"6").replace(/11111/g,"5").replace(/1111/g,"4").replace(/111/g,"3").replace(/11/g,"2")}(t)}function m(e,r,t){for(var o=function(e){for(var r=[],t=0;t<8;t++)for(var o=0;o<8;o++){var a=n[t]+(o+1);e!==a&&r.push({square:a,distance:(i=e,s=a,c=void 0,p=void 0,u=void 0,d=void 0,l=void 0,f=void 0,h=void 0,v=void 0,c=i.split(""),p=n.indexOf(c[0])+1,u=parseInt(c[1],10),d=s.split(""),l=n.indexOf(d[0])+1,f=parseInt(d[1],10),h=Math.abs(p-l),v=Math.abs(u-f),h>=v?h:v)})}var i,s,c,p,u,d,l,f,h,v;r.sort((function(e,n){return e.distance-n.distance}));var g=[];for(t=0;t<r.length;t++)g.push(r[t].square);return g}(t),a=0;a<o.length;a++){var i=o[a];if(e.hasOwnProperty(i)&&e[i]===r)return i}return!1}function A(e,n){var r=i(e);for(var t in n)if(n.hasOwnProperty(t)&&r.hasOwnProperty(t)){var o=r[t];delete r[t],r[n[t]]=o}return r}t.alpha="alpha-d2270",t.black="black-3c85d",t.board="board-b72b1",t.chessboard="chessboard-63f37",t.clearfix="clearfix-7da63",t.highlight1="highlight1-32417",t.highlight2="highlight2-9c5d2",t.notation="notation-322f9",t.numeric="numeric-fc462",t.piece="piece-417db",t.row="row-5277c",t.sparePieces="spare-pieces-7492f",t.sparePiecesBottom="spare-pieces-bottom-ae20f",t.sparePiecesTop="spare-pieces-top-4028b",t.square="square-55d63",t.white="white-1e1d7",window.Chessboard=function(y,x){if(!((window.$,e.fn&&e.fn.jquery&&(E="1.8.3",C=s(C=e.fn.jquery),E=s(E),1e5*C.major*1e5+1e5*C.minor+C.patch>=1e5*E.major*1e5+1e5*E.minor+E.patch))||(window.alert("Chessboard Error 1005: Unable to find a valid version of jQuery. Please include jQuery 1.8.3 or higher on the page\n\nExiting…"),0)))return null;var C,E,P=function(n){if(""===n)return window.alert("Chessboard Error 1001: The first argument to Chessboard() cannot be an empty string.\n\nExiting…"),!1;p(n)&&"#"!==n.charAt(0)&&(n="#"+n);var r=e(n);return 1!==r.length?(window.alert("Chessboard Error 1003: The first argument to Chessboard() must be the ID of a DOM node, an ID query selector, or a single DOM node.\n\nExiting…"),!1):r}(y);if(!P)return null;x=function(e){var n;return"black"!==e.orientation&&(e.orientation="white"),!1!==e.showNotation&&(e.showNotation=!0),!0!==e.draggable&&(e.draggable=!1),"trash"!==e.dropOffBoard&&(e.dropOffBoard="snapback"),!0!==e.sparePieces&&(e.sparePieces=!1),e.sparePieces&&(e.draggable=!0),e.hasOwnProperty("pieceTheme")&&(p(e.pieceTheme)||u(e.pieceTheme))||(e.pieceTheme="img/chesspieces/wikipedia/{piece}.png"),l(e.appearSpeed)||(e.appearSpeed=200),l(e.moveSpeed)||(e.moveSpeed=200),l(e.snapbackSpeed)||(e.snapbackSpeed=60),l(e.snapSpeed)||(e.snapSpeed=30),l(e.trashSpeed)||(e.trashSpeed=100),d(n=e.dragThrottleRate)&&n>=1||(e.dragThrottleRate=20),e}(x=function(n){return"start"===n?n={position:i(r)}:v(n)?n={position:b(n)}:g(n)&&(n={position:i(n)}),e.isPlainObject(n)||(n={}),n}(x));var k=null,B=null,O=null,S=null,T={},q=2,j="white",M={},N=null,I=null,R=null,D=!1,Q={},z={},L={},U=16;function K(e,n,r){if(!0===x.hasOwnProperty("showErrors")&&!1!==x.showErrors){var t="Chessboard Error "+e+": "+n;return"console"===x.showErrors&&"object"==typeof console&&"function"==typeof console.log?(console.log(t),void(arguments.length>=2&&console.log(r))):"alert"===x.showErrors?(r&&(t+="\n\n"+JSON.stringify(r)),void window.alert(t)):void(u(x.showErrors)&&x.showErrors(e,n,r))}}function X(e){return u(x.pieceTheme)?x.pieceTheme(e):p(x.pieceTheme)?c(x.pieceTheme,{piece:e}):(K(8272,"Unable to build image source for config.pieceTheme."),"")}function F(e,n,r){var o='<img src="'+X(e)+'" ';return p(r)&&""!==r&&(o+='id="'+r+'" '),o+='alt="" class="{piece}" data-piece="'+e+'" style="width:'+U+"px;height:"+U+"px;",n&&(o+="display:none;"),c(o+='" />',t)}function Y(e){var n=["wK","wQ","wR","wB","wN","wP"];"black"===e&&(n=["bK","bQ","bR","bB","bN","bP"]);for(var r="",t=0;t<n.length;t++)r+=F(n[t],!1,Q[n[t]]);return r}function $(n,r,o,i){var s=e("#"+z[n]),c=s.offset(),p=e("#"+z[r]),d=p.offset(),l=a();e("body").append(F(o,!0,l));var f=e("#"+l);f.css({display:"",position:"absolute",top:c.top,left:c.left}),s.find("."+t.piece).remove();var h={duration:x.moveSpeed,complete:function(){p.append(F(o)),f.remove(),u(i)&&i()}};f.animate(d,h)}function W(n,r,o){var i=e("#"+Q[n]).offset(),s=e("#"+z[r]),c=s.offset(),p=a();e("body").append(F(n,!0,p));var d=e("#"+p);d.css({display:"",position:"absolute",left:i.left,top:i.top});var l={duration:x.moveSpeed,complete:function(){s.find("."+t.piece).remove(),s.append(F(n)),d.remove(),u(o)&&o()}};d.animate(c,l)}function H(n,r,o){if(0!==n.length)for(var a=0,s=0;s<n.length;s++){var c=n[s];"clear"===c.type?e("#"+z[c.square]+" ."+t.piece).fadeOut(x.trashSpeed,p):"add"!==c.type||x.sparePieces?"add"===c.type&&x.sparePieces?W(c.piece,c.square,p):"move"===c.type&&$(c.source,c.destination,c.piece,p):e("#"+z[c.square]).append(F(c.piece,!0)).find("."+t.piece).fadeIn(x.appearSpeed,p)}function p(){(a+=1)===n.length&&(_(),u(x.onMoveEnd)&&x.onMoveEnd(i(r),i(o)))}}function Z(e,n){e=i(e),n=i(n);var r=[],t={};for(var o in n)n.hasOwnProperty(o)&&e.hasOwnProperty(o)&&e[o]===n[o]&&(delete e[o],delete n[o]);for(o in n)if(n.hasOwnProperty(o)){var a=m(e,n[o],o);a&&(r.push({type:"move",source:a,destination:o,piece:n[o]}),delete e[a],delete n[o],t[o]=!0)}for(o in n)n.hasOwnProperty(o)&&(r.push({type:"add",square:o,piece:n[o]}),delete n[o]);for(o in e)e.hasOwnProperty(o)&&(t.hasOwnProperty(o)||(r.push({type:"clear",square:o,piece:e[o]}),delete e[o]));return r}function _(){for(var n in k.find("."+t.piece).remove(),M)M.hasOwnProperty(n)&&e("#"+z[n]).append(F(M[n]))}function J(){k.html(function(e){"black"!==e&&(e="white");var r="",o=i(n),a=8;"black"===e&&(o.reverse(),a=1);for(var s="white",p=0;p<8;p++){r+='<div class="{row}">';for(var u=0;u<8;u++){var d=o[u]+a;r+='<div class="{square} '+t[s]+" square-"+d+'" style="width:'+U+"px;height:"+U+'px;" id="'+z[d]+'" data-square="'+d+'">',x.showNotation&&(("white"===e&&1===a||"black"===e&&8===a)&&(r+='<div class="{notation} {alpha}">'+o[u]+"</div>"),0===u&&(r+='<div class="{notation} {numeric}">'+a+"</div>")),r+="</div>",s="white"===s?"black":"white"}r+='<div class="{clearfix}"></div></div>',s="white"===s?"black":"white","white"===e?a-=1:a+=1}return c(r,t)}(j,x.showNotation)),_(),x.sparePieces&&("white"===j?(O.html(Y("black")),S.html(Y("white"))):(O.html(Y("white")),S.html(Y("black"))))}function G(e){var n=i(M),r=i(e);w(n)!==w(r)&&(u(x.onChange)&&x.onChange(n,r),M=e)}function V(e,n){for(var r in L)if(L.hasOwnProperty(r)){var t=L[r];if(e>=t.left&&e<t.left+U&&n>=t.top&&n<t.top+U)return r}return"offboard"}function ee(){k.find("."+t.square).removeClass(t.highlight1+" "+t.highlight2)}function ne(){ee();var e=i(M);delete e[R],G(e),_(),B.fadeOut(x.trashSpeed),D=!1}function re(n,r,o,a){u(x.onDragStart)&&!1===x.onDragStart(n,r,i(M),j)||(D=!0,N=r,R=n,I="spare"===n?"offboard":n,function(){for(var n in L={},z)z.hasOwnProperty(n)&&(L[n]=e("#"+z[n]).offset())}(),B.attr("src",X(r)).css({display:"",position:"absolute",left:o-U/2,top:a-U/2}),"spare"!==n&&e("#"+z[n]).addClass(t.highlight1).find("."+t.piece).css("display","none"))}function te(n,r){B.css({left:n-U/2,top:r-U/2});var o=V(n,r);o!==I&&(h(I)&&e("#"+z[I]).removeClass(t.highlight2),h(o)&&e("#"+z[o]).addClass(t.highlight2),u(x.onDragMove)&&x.onDragMove(o,I,R,N,i(M),j),I=o)}function oe(n){var r="drop";if("offboard"===n&&"snapback"===x.dropOffBoard&&(r="snapback"),"offboard"===n&&"trash"===x.dropOffBoard&&(r="trash"),u(x.onDrop)){var t=i(M);"spare"===R&&h(n)&&(t[n]=N),h(R)&&"offboard"===n&&delete t[R],h(R)&&h(n)&&(delete t[R],t[n]=N);var o=i(M),a=x.onDrop(R,n,N,t,o,j);"snapback"!==a&&"trash"!==a||(r=a)}"snapback"===r?function(){if("spare"!==R){ee();var n=e("#"+z[R]).offset(),r={duration:x.snapbackSpeed,complete:function(){_(),B.css("display","none"),u(x.onSnapbackEnd)&&x.onSnapbackEnd(N,R,i(M),j)}};B.animate(n,r),D=!1}else ne()}():"trash"===r?ne():"drop"===r&&function(n){ee();var r=i(M);delete r[R],r[n]=N,G(r);var t=e("#"+z[n]).offset(),o={duration:x.snapSpeed,complete:function(){_(),B.css("display","none"),u(x.onSnapEnd)&&x.onSnapEnd(R,n,N)}};B.animate(t,o),D=!1}(n)}function ae(e){e.preventDefault()}function ie(n){if(x.draggable){var r=e(this).attr("data-square");h(r)&&M.hasOwnProperty(r)&&re(r,M[r],n.pageX,n.pageY)}}function se(n){if(x.draggable){var r=e(this).attr("data-square");h(r)&&M.hasOwnProperty(r)&&(n=n.originalEvent,re(r,M[r],n.changedTouches[0].pageX,n.changedTouches[0].pageY))}}function ce(n){x.sparePieces&&re("spare",e(this).attr("data-piece"),n.pageX,n.pageY)}function pe(n){x.sparePieces&&re("spare",e(this).attr("data-piece"),(n=n.originalEvent).changedTouches[0].pageX,n.changedTouches[0].pageY)}T.clear=function(e){T.position({},e)},T.destroy=function(){P.html(""),B.remove(),P.unbind()},T.fen=function(){return T.position("fen")},T.flip=function(){return T.orientation("flip")},T.move=function(){if(0!==arguments.length){for(var e=!0,n={},r=0;r<arguments.length;r++)if(!1!==arguments[r])if(f(arguments[r])){var t=arguments[r].split("-");n[t[0]]=t[1]}else K(2826,"Invalid move passed to the move method.",arguments[r]);else e=!1;var o=A(M,n);return T.position(o,e),o}},T.orientation=function(e){return 0===arguments.length?j:"white"===e||"black"===e?(j=e,J(),j):"flip"===e?(j="white"===j?"black":"white",J(),j):void K(5482,"Invalid value passed to the orientation method.",e)},T.position=function(e,n){if(0===arguments.length)return i(M);if(p(e)&&"fen"===e.toLowerCase())return w(M);if(p(e)&&"start"===e.toLowerCase()&&(e=i(r)),v(e)&&(e=b(e)),g(e))if(!1!==n&&(n=!0),n){var t=Z(M,e);H(t,M,e),G(e)}else G(e),_();else K(6482,"Invalid value passed to the position method.",e)},T.resize=function(){U=function(){var e=parseInt(P.width(),10);if(!e||e<=0)return 0;for(var n=e-1;n%8!=0&&n>0;)n-=1;return n/8}(),k.css("width",8*U+"px"),B.css({height:U,width:U}),x.sparePieces&&P.find("."+t.sparePieces).css("paddingLeft",U+q+"px"),J()},T.start=function(e){T.position("start",e)};var ue=o((function(e){D&&te(e.pageX,e.pageY)}),x.dragThrottleRate),de=o((function(e){D&&(e.preventDefault(),te(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}),x.dragThrottleRate);function le(e){D&&oe(V(e.pageX,e.pageY))}function fe(e){D&&oe(V(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}function he(n){if(!D&&u(x.onMouseoverSquare)){var r=e(n.currentTarget).attr("data-square");if(h(r)){var t=!1;M.hasOwnProperty(r)&&(t=M[r]),x.onMouseoverSquare(r,t,i(M),j)}}}function ve(n){if(!D&&u(x.onMouseoutSquare)){var r=e(n.currentTarget).attr("data-square");if(h(r)){var t=!1;M.hasOwnProperty(r)&&(t=M[r]),x.onMouseoutSquare(r,t,i(M),j)}}}return j=x.orientation,x.hasOwnProperty("position")&&("start"===x.position?M=i(r):v(x.position)?M=b(x.position):g(x.position)?M=i(x.position):K(7263,"Invalid value passed to config.position.",x.position)),function(){var r,o;!function(){for(var e=0;e<n.length;e++)for(var r=1;r<=8;r++){var t=n[e]+r;z[t]=t+"-"+a()}var o="KQRNBP".split("");for(e=0;e<o.length;e++){var i="w"+o[e],s="b"+o[e];Q[i]=i+"-"+a(),Q[s]=s+"-"+a()}}(),P.html((o='<div class="{chessboard}">',(r=x.sparePieces)&&(o+='<div class="{sparePieces} {sparePiecesTop}"></div>'),o+='<div class="{board}"></div>',r&&(o+='<div class="{sparePieces} {sparePiecesBottom}"></div>'),c(o+="</div>",t))),k=P.find("."+t.board),x.sparePieces&&(O=P.find("."+t.sparePiecesTop),S=P.find("."+t.sparePiecesBottom));var i=a();e("body").append(F("wP",!0,i)),B=e("#"+i),q=parseInt(k.css("borderLeftWidth"),10),T.resize()}(),function(){e("body").on("mousedown mousemove","."+t.piece,ae),k.on("mousedown","."+t.square,ie),P.on("mousedown","."+t.sparePieces+" ."+t.piece,ce),k.on("mouseenter","."+t.square,he).on("mouseleave","."+t.square,ve);var n=e(window);n.on("mousemove",ue).on("mouseup",le),"ontouchstart"in document.documentElement&&(k.on("touchstart","."+t.square,se),P.on("touchstart","."+t.sparePieces+" ."+t.piece,pe),n.on("touchmove",de).on("touchend",fe))}(),T},window.ChessBoard=window.Chessboard,window.Chessboard.fenToObj=b,window.Chessboard.objToFen=w}()},816:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,'/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n',"",{version:3,sources:["webpack://./css/chessboard-1.0.0.css"],names:[],mappings:"AAAA,yFAAyF;;AAEzF;EACE,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,kBAAkB;;EAElB,4CAA4C;EAC5C,2BAA2B;IACzB,yBAAyB;KACxB,wBAAwB;OACtB,sBAAsB;QACrB,qBAAqB;YACjB,iBAAiB;AAC7B;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,2DAA2D;EAC3D,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,QAAQ;EACR,SAAS;AACX",sourcesContent:['/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n'],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var p=0;p<e.length;p++){var u=[].concat(e[p]);t&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},743:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bB.png"},68:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bK.png"},602:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bN.png"},817:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bP.png"},207:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bQ.png"},993:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bR.png"},181:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wB.png"},902:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wK.png"},986:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wN.png"},998:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wP.png"},178:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wQ.png"},713:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wR.png"},379:e=>{"use strict";var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],p=t.base?c[0]+t.base:c[0],u=a[p]||0,d="".concat(p," ").concat(u);a[p]=u+1;var l=r(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)n[l].references++,n[l].updater(f);else{var h=o(f,t);t.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=r(a[i]);n[s].references--}for(var c=t(e,o),p=0;p<a.length;p++){var u=r(a[p]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=c}}},569:e=>{"use strict";var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{"use strict";e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0,(()=>{"use strict";var e,n=r(379),t=r.n(n),o=r(795),a=r.n(o),i=r(569),s=r.n(i),c=r(565),p=r.n(c),u=r(216),d=r.n(u),l=r(589),f=r.n(l),h=r(816),v={};v.styleTagTransform=f(),v.setAttributes=p(),v.insert=s().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),t()(h.Z,v),h.Z&&h.Z.locals&&h.Z.locals,r(768),(e=r(272)).keys().map(e),ChessBoard("board1",{position:"start",draggable:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,