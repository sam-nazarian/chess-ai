(()=>{var e={272:(e,n,r)=>{var t={"./bB.png":743,"./bK.png":68,"./bN.png":602,"./bP.png":817,"./bQ.png":207,"./bR.png":993,"./wB.png":181,"./wK.png":902,"./wN.png":986,"./wP.png":998,"./wQ.png":178,"./wR.png":713};function o(e){var n=i(e);return r(n)}function i(e){if(!r.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}o.keys=function(){return Object.keys(t)},o.resolve=i,e.exports=o,o.id=272},768:()=>{!function(){"use strict";var e=window.jQuery,n="abcdefgh".split(""),r=v("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"),t={};function o(e,n,r){var t=0,o=!1,i=[],a=function(){t=0,o&&(o=!1,s())},s=function(){t=window.setTimeout(a,n),e.apply(r,i)};return function(e){i=arguments,t?o=!0:s()}}function i(){return"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".replace(/x/g,(function(e){return(16*Math.random()|0).toString(16)}))}function a(e){return JSON.parse(JSON.stringify(e))}function s(e){var n=e.split(".");return{major:parseInt(n[0],10),minor:parseInt(n[1],10),patch:parseInt(n[2],10)}}function c(e,n){for(var r in n)if(n.hasOwnProperty(r))for(var t="{"+r+"}",o=n[r];-1!==e.indexOf(t);)e=e.replace(t,o);return e}function l(e){return"string"==typeof e}function u(e){return"function"==typeof e}function p(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}function f(e){return"fast"===e||"slow"===e||!!p(e)&&e>=0}function d(e){if(!l(e))return!1;var n=e.split("-");return 2===n.length&&h(n[0])&&h(n[1])}function h(e){return l(e)&&-1!==e.search(/^[a-h][1-8]$/)}function g(e){if(!l(e))return!1;var n=(e=function(e){return e.replace(/8/g,"11111111").replace(/7/g,"1111111").replace(/6/g,"111111").replace(/5/g,"11111").replace(/4/g,"1111").replace(/3/g,"111").replace(/2/g,"11")}(e=e.replace(/ .+$/,""))).split("/");if(8!==n.length)return!1;for(var r=0;r<8;r++)if(8!==n[r].length||-1!==n[r].search(/[^kqrnbpKQRNBP1]/))return!1;return!0}function A(n){if(!e.isPlainObject(n))return!1;for(var r in n)if(n.hasOwnProperty(r)&&(!h(r)||(!l(t=n[r])||-1===t.search(/^[bw][KQRNBP]$/))))return!1;var t;return!0}function v(e){if(!g(e))return!1;for(var r,t=(e=e.replace(/ .+$/,"")).split("/"),o={},i=8,a=0;a<8;a++){for(var s=t[a].split(""),c=0,l=0;l<s.length;l++)-1!==s[l].search(/[1-8]/)?c+=parseInt(s[l],10):(o[n[c]+i]=(r=s[l]).toLowerCase()===r?"b"+r.toUpperCase():"w"+r.toUpperCase(),c+=1);i-=1}return o}function b(e){if(!A(e))return!1;for(var r,t="",o=8,i=0;i<8;i++){for(var a=0;a<8;a++){var s=n[a]+o;e.hasOwnProperty(s)?t+=(r=void 0,"w"===(r=e[s].split(""))[0]?r[1].toUpperCase():r[1].toLowerCase()):t+="1"}7!==i&&(t+="/"),o-=1}return function(e){return e.replace(/11111111/g,"8").replace(/1111111/g,"7").replace(/111111/g,"6").replace(/11111/g,"5").replace(/1111/g,"4").replace(/111/g,"3").replace(/11/g,"2")}(t)}function m(e,r,t){for(var o=function(e){for(var r=[],t=0;t<8;t++)for(var o=0;o<8;o++){var i=n[t]+(o+1);e!==i&&r.push({square:i,distance:(a=e,s=i,c=void 0,l=void 0,u=void 0,p=void 0,f=void 0,d=void 0,h=void 0,g=void 0,c=a.split(""),l=n.indexOf(c[0])+1,u=parseInt(c[1],10),p=s.split(""),f=n.indexOf(p[0])+1,d=parseInt(p[1],10),h=Math.abs(l-f),g=Math.abs(u-d),h>=g?h:g)})}var a,s,c,l,u,p,f,d,h,g;r.sort((function(e,n){return e.distance-n.distance}));var A=[];for(t=0;t<r.length;t++)A.push(r[t].square);return A}(t),i=0;i<o.length;i++){var a=o[i];if(e.hasOwnProperty(a)&&e[a]===r)return a}return!1}function E(e,n){var r=a(e);for(var t in n)if(n.hasOwnProperty(t)&&r.hasOwnProperty(t)){var o=r[t];delete r[t],r[n[t]]=o}return r}t.alpha="alpha-d2270",t.black="black-3c85d",t.board="board-b72b1",t.chessboard="chessboard-63f37",t.clearfix="clearfix-7da63",t.highlight1="highlight1-32417",t.highlight2="highlight2-9c5d2",t.notation="notation-322f9",t.numeric="numeric-fc462",t.piece="piece-417db",t.row="row-5277c",t.sparePieces="spare-pieces-7492f",t.sparePiecesBottom="spare-pieces-bottom-ae20f",t.sparePiecesTop="spare-pieces-top-4028b",t.square="square-55d63",t.white="white-1e1d7",window.Chessboard=function(w,C){if(!((window.$,e.fn&&e.fn.jquery&&(B="1.8.3",y=s(y=e.fn.jquery),B=s(B),1e5*y.major*1e5+1e5*y.minor+y.patch>=1e5*B.major*1e5+1e5*B.minor+B.patch))||(window.alert("Chessboard Error 1005: Unable to find a valid version of jQuery. Please include jQuery 1.8.3 or higher on the page\n\nExiting…"),0)))return null;var y,B,x=function(n){if(""===n)return window.alert("Chessboard Error 1001: The first argument to Chessboard() cannot be an empty string.\n\nExiting…"),!1;l(n)&&"#"!==n.charAt(0)&&(n="#"+n);var r=e(n);return 1!==r.length?(window.alert("Chessboard Error 1003: The first argument to Chessboard() must be the ID of a DOM node, an ID query selector, or a single DOM node.\n\nExiting…"),!1):r}(w);if(!x)return null;C=function(e){var n;return"black"!==e.orientation&&(e.orientation="white"),!1!==e.showNotation&&(e.showNotation=!0),!0!==e.draggable&&(e.draggable=!1),"trash"!==e.dropOffBoard&&(e.dropOffBoard="snapback"),!0!==e.sparePieces&&(e.sparePieces=!1),e.sparePieces&&(e.draggable=!0),e.hasOwnProperty("pieceTheme")&&(l(e.pieceTheme)||u(e.pieceTheme))||(e.pieceTheme="img/chesspieces/wikipedia/{piece}.png"),f(e.appearSpeed)||(e.appearSpeed=200),f(e.moveSpeed)||(e.moveSpeed=200),f(e.snapbackSpeed)||(e.snapbackSpeed=60),f(e.snapSpeed)||(e.snapSpeed=30),f(e.trashSpeed)||(e.trashSpeed=100),p(n=e.dragThrottleRate)&&n>=1||(e.dragThrottleRate=20),e}(C=function(n){return"start"===n?n={position:a(r)}:g(n)?n={position:v(n)}:A(n)&&(n={position:a(n)}),e.isPlainObject(n)||(n={}),n}(C));var k=null,S=null,P=null,T=null,_={},O=2,q="white",I={},L=null,R=null,N=null,j=!1,D={},M={},U={},Q=16;function K(e,n,r){if(!0===C.hasOwnProperty("showErrors")&&!1!==C.showErrors){var t="Chessboard Error "+e+": "+n;return"console"===C.showErrors&&"object"==typeof console&&"function"==typeof console.log?(console.log(t),void(arguments.length>=2&&console.log(r))):"alert"===C.showErrors?(r&&(t+="\n\n"+JSON.stringify(r)),void window.alert(t)):void(u(C.showErrors)&&C.showErrors(e,n,r))}}function W(e){return u(C.pieceTheme)?C.pieceTheme(e):l(C.pieceTheme)?c(C.pieceTheme,{piece:e}):(K(8272,"Unable to build image source for config.pieceTheme."),"")}function $(e,n,r){var o='<img src="'+W(e)+'" ';return l(r)&&""!==r&&(o+='id="'+r+'" '),o+='alt="" class="{piece}" data-piece="'+e+'" style="width:'+Q+"px;height:"+Q+"px;",n&&(o+="display:none;"),c(o+='" />',t)}function z(e){var n=["wK","wQ","wR","wB","wN","wP"];"black"===e&&(n=["bK","bQ","bR","bB","bN","bP"]);for(var r="",t=0;t<n.length;t++)r+=$(n[t],!1,D[n[t]]);return r}function H(n,r,o,a){var s=e("#"+M[n]),c=s.offset(),l=e("#"+M[r]),p=l.offset(),f=i();e("body").append($(o,!0,f));var d=e("#"+f);d.css({display:"",position:"absolute",top:c.top,left:c.left}),s.find("."+t.piece).remove();var h={duration:C.moveSpeed,complete:function(){l.append($(o)),d.remove(),u(a)&&a()}};d.animate(p,h)}function Y(n,r,o){var a=e("#"+D[n]).offset(),s=e("#"+M[r]),c=s.offset(),l=i();e("body").append($(n,!0,l));var p=e("#"+l);p.css({display:"",position:"absolute",left:a.left,top:a.top});var f={duration:C.moveSpeed,complete:function(){s.find("."+t.piece).remove(),s.append($(n)),p.remove(),u(o)&&o()}};p.animate(c,f)}function G(n,r,o){if(0!==n.length)for(var i=0,s=0;s<n.length;s++){var c=n[s];"clear"===c.type?e("#"+M[c.square]+" ."+t.piece).fadeOut(C.trashSpeed,l):"add"!==c.type||C.sparePieces?"add"===c.type&&C.sparePieces?Y(c.piece,c.square,l):"move"===c.type&&H(c.source,c.destination,c.piece,l):e("#"+M[c.square]).append($(c.piece,!0)).find("."+t.piece).fadeIn(C.appearSpeed,l)}function l(){(i+=1)===n.length&&(Z(),u(C.onMoveEnd)&&C.onMoveEnd(a(r),a(o)))}}function X(e,n){e=a(e),n=a(n);var r=[],t={};for(var o in n)n.hasOwnProperty(o)&&e.hasOwnProperty(o)&&e[o]===n[o]&&(delete e[o],delete n[o]);for(o in n)if(n.hasOwnProperty(o)){var i=m(e,n[o],o);i&&(r.push({type:"move",source:i,destination:o,piece:n[o]}),delete e[i],delete n[o],t[o]=!0)}for(o in n)n.hasOwnProperty(o)&&(r.push({type:"add",square:o,piece:n[o]}),delete n[o]);for(o in e)e.hasOwnProperty(o)&&(t.hasOwnProperty(o)||(r.push({type:"clear",square:o,piece:e[o]}),delete e[o]));return r}function Z(){for(var n in k.find("."+t.piece).remove(),I)I.hasOwnProperty(n)&&e("#"+M[n]).append($(I[n]))}function F(){k.html(function(e){"black"!==e&&(e="white");var r="",o=a(n),i=8;"black"===e&&(o.reverse(),i=1);for(var s="white",l=0;l<8;l++){r+='<div class="{row}">';for(var u=0;u<8;u++){var p=o[u]+i;r+='<div class="{square} '+t[s]+" square-"+p+'" style="width:'+Q+"px;height:"+Q+'px;" id="'+M[p]+'" data-square="'+p+'">',C.showNotation&&(("white"===e&&1===i||"black"===e&&8===i)&&(r+='<div class="{notation} {alpha}">'+o[u]+"</div>"),0===u&&(r+='<div class="{notation} {numeric}">'+i+"</div>")),r+="</div>",s="white"===s?"black":"white"}r+='<div class="{clearfix}"></div></div>',s="white"===s?"black":"white","white"===e?i-=1:i+=1}return c(r,t)}(q,C.showNotation)),Z(),C.sparePieces&&("white"===q?(P.html(z("black")),T.html(z("white"))):(P.html(z("white")),T.html(z("black"))))}function J(e){var n=a(I),r=a(e);b(n)!==b(r)&&(u(C.onChange)&&C.onChange(n,r),I=e)}function V(e,n){for(var r in U)if(U.hasOwnProperty(r)){var t=U[r];if(e>=t.left&&e<t.left+Q&&n>=t.top&&n<t.top+Q)return r}return"offboard"}function ee(){k.find("."+t.square).removeClass(t.highlight1+" "+t.highlight2)}function ne(){ee();var e=a(I);delete e[N],J(e),Z(),S.fadeOut(C.trashSpeed),j=!1}function re(n,r,o,i){u(C.onDragStart)&&!1===C.onDragStart(n,r,a(I),q)||(j=!0,L=r,N=n,R="spare"===n?"offboard":n,function(){for(var n in U={},M)M.hasOwnProperty(n)&&(U[n]=e("#"+M[n]).offset())}(),S.attr("src",W(r)).css({display:"",position:"absolute",left:o-Q/2,top:i-Q/2}),"spare"!==n&&e("#"+M[n]).addClass(t.highlight1).find("."+t.piece).css("display","none"))}function te(n,r){S.css({left:n-Q/2,top:r-Q/2});var o=V(n,r);o!==R&&(h(R)&&e("#"+M[R]).removeClass(t.highlight2),h(o)&&e("#"+M[o]).addClass(t.highlight2),u(C.onDragMove)&&C.onDragMove(o,R,N,L,a(I),q),R=o)}function oe(n){var r="drop";if("offboard"===n&&"snapback"===C.dropOffBoard&&(r="snapback"),"offboard"===n&&"trash"===C.dropOffBoard&&(r="trash"),u(C.onDrop)){var t=a(I);"spare"===N&&h(n)&&(t[n]=L),h(N)&&"offboard"===n&&delete t[N],h(N)&&h(n)&&(delete t[N],t[n]=L);var o=a(I),i=C.onDrop(N,n,L,t,o,q);"snapback"!==i&&"trash"!==i||(r=i)}"snapback"===r?function(){if("spare"!==N){ee();var n=e("#"+M[N]).offset(),r={duration:C.snapbackSpeed,complete:function(){Z(),S.css("display","none"),u(C.onSnapbackEnd)&&C.onSnapbackEnd(L,N,a(I),q)}};S.animate(n,r),j=!1}else ne()}():"trash"===r?ne():"drop"===r&&function(n){ee();var r=a(I);delete r[N],r[n]=L,J(r);var t=e("#"+M[n]).offset(),o={duration:C.snapSpeed,complete:function(){Z(),S.css("display","none"),u(C.onSnapEnd)&&C.onSnapEnd(N,n,L)}};S.animate(t,o),j=!1}(n)}function ie(e){e.preventDefault()}function ae(n){if(C.draggable){var r=e(this).attr("data-square");h(r)&&I.hasOwnProperty(r)&&re(r,I[r],n.pageX,n.pageY)}}function se(n){if(C.draggable){var r=e(this).attr("data-square");h(r)&&I.hasOwnProperty(r)&&(n=n.originalEvent,re(r,I[r],n.changedTouches[0].pageX,n.changedTouches[0].pageY))}}function ce(n){C.sparePieces&&re("spare",e(this).attr("data-piece"),n.pageX,n.pageY)}function le(n){C.sparePieces&&re("spare",e(this).attr("data-piece"),(n=n.originalEvent).changedTouches[0].pageX,n.changedTouches[0].pageY)}_.clear=function(e){_.position({},e)},_.destroy=function(){x.html(""),S.remove(),x.unbind()},_.fen=function(){return _.position("fen")},_.flip=function(){return _.orientation("flip")},_.move=function(){if(0!==arguments.length){for(var e=!0,n={},r=0;r<arguments.length;r++)if(!1!==arguments[r])if(d(arguments[r])){var t=arguments[r].split("-");n[t[0]]=t[1]}else K(2826,"Invalid move passed to the move method.",arguments[r]);else e=!1;var o=E(I,n);return _.position(o,e),o}},_.orientation=function(e){return 0===arguments.length?q:"white"===e||"black"===e?(q=e,F(),q):"flip"===e?(q="white"===q?"black":"white",F(),q):void K(5482,"Invalid value passed to the orientation method.",e)},_.position=function(e,n){if(0===arguments.length)return a(I);if(l(e)&&"fen"===e.toLowerCase())return b(I);if(l(e)&&"start"===e.toLowerCase()&&(e=a(r)),g(e)&&(e=v(e)),A(e))if(!1!==n&&(n=!0),n){var t=X(I,e);G(t,I,e),J(e)}else J(e),Z();else K(6482,"Invalid value passed to the position method.",e)},_.resize=function(){Q=function(){var e=parseInt(x.width(),10);if(!e||e<=0)return 0;for(var n=e-1;n%8!=0&&n>0;)n-=1;return n/8}(),k.css("width",8*Q+"px"),S.css({height:Q,width:Q}),C.sparePieces&&x.find("."+t.sparePieces).css("paddingLeft",Q+O+"px"),F()},_.start=function(e){_.position("start",e)};var ue=o((function(e){j&&te(e.pageX,e.pageY)}),C.dragThrottleRate),pe=o((function(e){j&&(e.preventDefault(),te(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}),C.dragThrottleRate);function fe(e){j&&oe(V(e.pageX,e.pageY))}function de(e){j&&oe(V(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}function he(n){if(!j&&u(C.onMouseoverSquare)){var r=e(n.currentTarget).attr("data-square");if(h(r)){var t=!1;I.hasOwnProperty(r)&&(t=I[r]),C.onMouseoverSquare(r,t,a(I),q)}}}function ge(n){if(!j&&u(C.onMouseoutSquare)){var r=e(n.currentTarget).attr("data-square");if(h(r)){var t=!1;I.hasOwnProperty(r)&&(t=I[r]),C.onMouseoutSquare(r,t,a(I),q)}}}return q=C.orientation,C.hasOwnProperty("position")&&("start"===C.position?I=a(r):g(C.position)?I=v(C.position):A(C.position)?I=a(C.position):K(7263,"Invalid value passed to config.position.",C.position)),function(){var r,o;!function(){for(var e=0;e<n.length;e++)for(var r=1;r<=8;r++){var t=n[e]+r;M[t]=t+"-"+i()}var o="KQRNBP".split("");for(e=0;e<o.length;e++){var a="w"+o[e],s="b"+o[e];D[a]=a+"-"+i(),D[s]=s+"-"+i()}}(),x.html((o='<div class="{chessboard}">',(r=C.sparePieces)&&(o+='<div class="{sparePieces} {sparePiecesTop}"></div>'),o+='<div class="{board}"></div>',r&&(o+='<div class="{sparePieces} {sparePiecesBottom}"></div>'),c(o+="</div>",t))),k=x.find("."+t.board),C.sparePieces&&(P=x.find("."+t.sparePiecesTop),T=x.find("."+t.sparePiecesBottom));var a=i();e("body").append($("wP",!0,a)),S=e("#"+a),O=parseInt(k.css("borderLeftWidth"),10),_.resize()}(),function(){e("body").on("mousedown mousemove","."+t.piece,ie),k.on("mousedown","."+t.square,ae),x.on("mousedown","."+t.sparePieces+" ."+t.piece,ce),k.on("mouseenter","."+t.square,he).on("mouseleave","."+t.square,ge);var n=e(window);n.on("mousemove",ue).on("mouseup",fe),"ontouchstart"in document.documentElement&&(k.on("touchstart","."+t.square,se),x.on("touchstart","."+t.sparePieces+" ."+t.piece,le),n.on("touchmove",pe).on("touchend",de))}(),_},window.ChessBoard=window.Chessboard,window.Chessboard.fenToObj=v,window.Chessboard.objToFen=b}()},816:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,'/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n',"",{version:3,sources:["webpack://./css/chessboard-1.0.0.css"],names:[],mappings:"AAAA,yFAAyF;;AAEzF;EACE,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,kBAAkB;;EAElB,4CAA4C;EAC5C,2BAA2B;IACzB,yBAAyB;KACxB,wBAAwB;OACtB,sBAAsB;QACrB,qBAAqB;YACjB,iBAAiB;AAC7B;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,2DAA2D;EAC3D,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,QAAQ;EACR,SAAS;AACX",sourcesContent:['/*! chessboard.js v1.0.0 | (c) 2019 Chris Oakman | MIT License chessboardjs.com/license */\n\r\n.clearfix-7da63 {\n  clear: both;\r\n}\r\n\r\n.board-b72b1 {\n  border: 2px solid #404040;\n  box-sizing: content-box;\n}\r\n\r\n.square-55d63 {\n  float: left;\r\n  position: relative;\r\n\r\n  /* disable any native browser highlighting */\r\n  -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n     -khtml-user-select: none;\r\n       -moz-user-select: none;\r\n        -ms-user-select: none;\r\n            user-select: none;\r\n}\r\n\r\n.white-1e1d7 {\n  background-color: #f0d9b5;\r\n  color: #b58863;\r\n}\r\n\r\n.black-3c85d {\n  background-color: #b58863;\r\n  color: #f0d9b5;\r\n}\r\n\n.highlight1-32417, .highlight2-9c5d2 {\n  box-shadow: inset 0 0 3px 3px yellow;\r\n}\r\n\n.notation-322f9 {\r\n  cursor: default;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  position: absolute;\r\n}\n\n.alpha-d2270 {\r\n  bottom: 1px;\r\n  right: 3px;\r\n}\n\n.numeric-fc462 {\r\n  top: 2px;\r\n  left: 2px;\r\n}\n'],sourceRoot:""}]);const s=a},238:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,"html {\n  height: 100%;\n}\n\nbody {\n  /* background-color: #262421 */\n  /* background: rgb(15, 15, 15);\n  background: linear-gradient(95deg, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%); */\n\n  background: rgb(15, 15, 15);\n  background: linear-gradient(to bottom, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%);\n  height: 100%;\n  margin: 0;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  font: serif;\n}\n\n.interface{\n  /* used padding, instead of margin as I don't want website to be scrollable */\n  padding-top: 100px;\n\n  /* position: relative; */\n\n}\n\n.board-container{\n  display: flex;\n  align-items: flex-start;\n  /* align-items: stretch; */\n}\n\n#htmlBoard {\n  /* width: 35%; */\n  /* margin: 0 auto; */\n  flex: 1 0 13%;\n\n  /* margin-top: 100px; */\n}\n\n.progressbar {\n\n  margin-left: 100px;\n\n  /* height: 600px; */\n  align-self: stretch;\n\n\n  background-color: #000;\n  border-radius: 13px;\n  width: 20px;\n\n  /* try to only use the 180deg, 90deg, gets complex with the positioning */\n  transform: rotate(180deg);\n}\n\n.right-side{\n  margin-left: 400px;\n  flex: 1;\n\n  /* align-self: center; */\n  /* justify-content: center; */\n   /* align-items: center;      */\n  /* align-content: center;  */\n}\n\n\n/* .chessboard-63f37{\n  position: relative;\n} */\n\n.progress {\n  transition : height 1000ms ease-out;\n  background-color: #fff;\n\n  /* Adjust width using JS */\n  width: 20px;\n\n  /* also sets the hegiht of parent */\n  height: 50%;\n\n  border-radius: 10px;\n}\n\n\n.turn-container{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.chess-img{\n  /* display: block; */\n  /* margin: 0 auto; */\n}\n\n.player-turn-text{\n  color: white;\n  font-weight: bold;\n  font-family: 'Inter', sans-serif;\n  font-size: 12px;\n}\n\n.restart-btn{\n\n  /* background-color: white */\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;  \n  display:block;\n  width: 300px;\n  margin: 0 auto;\n  margin-top: 20px;\n\n\n  /* margin-top: 20px; */\n  /* background-color: #262421; */\n  background-color: #262524;\n  color: #999;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-bottom: 15px;\n}\n\n\n.restart-btn:hover{\n  background: #313030;\n}\n\n.winner-text{\n  /* margin-top: 200px; */\n  margin: 0;\n  color:#fff;\n  text-align: center;\n  font-weight: bold;\n  font-size: 48.83px;\n  font-family: 'Inter', sans-serif;\n  /* display: none; */\n  opacity: 0;\n\n  /* Transition for the opacity right above */\n  /* transition: opacity 1s ease-in; */ \n}\n\n.winner-text-active{\n  opacity: 1;\n  display: block;\n  transition: opacity 1s ease-in;\n}\n\n.hide{\n  display: none;\n}\n\n\n\n\n/* flex: 1; */\n/* flex: 0 1 auto; */\n/* .progressbar-container{\n  margin-left: 100px;\n  height: 500px;\n  background-color: rgb(159, 41, 41);\n\n  align-self: stretch;\n} */\n\n\n\n\n/* (height of inner div) / 2 + padding */\n/* transform-origin: 100% 0; */\n\n/* .progressbar {\n  background-color: black;\n  border-radius: 13px;\n  position: absolute;\n\n  padding: 3px;\n  transform:rotate(-90deg);\n\n  width: 300px;\n  height: 20px;\n  top: 0px;\n  right: 0px;\n} */\n\n\n\n","",{version:3,sources:["webpack://./css/main.css"],names:[],mappings:"AAAA;EACE,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B;kHACgH;;EAEhH,2BAA2B;EAC3B,iHAAiH;EACjH,YAAY;EACZ,SAAS;EACT,4BAA4B;EAC5B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,6EAA6E;EAC7E,kBAAkB;;EAElB,wBAAwB;;AAE1B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,oBAAoB;EACpB,aAAa;;EAEb,uBAAuB;AACzB;;AAEA;;EAEE,kBAAkB;;EAElB,mBAAmB;EACnB,mBAAmB;;;EAGnB,sBAAsB;EACtB,mBAAmB;EACnB,WAAW;;EAEX,yEAAyE;EACzE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,OAAO;;EAEP,wBAAwB;EACxB,6BAA6B;GAC5B,8BAA8B;EAC/B,4BAA4B;AAC9B;;;AAGA;;GAEG;;AAEH;EACE,mCAAmC;EACnC,sBAAsB;;EAEtB,0BAA0B;EAC1B,WAAW;;EAEX,mCAAmC;EACnC,WAAW;;EAEX,mBAAmB;AACrB;;;AAGA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,oBAAoB;AACtB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,gCAAgC;EAChC,eAAe;AACjB;;AAEA;;EAEE,4BAA4B;EAC5B,aAAa;EACb,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,cAAc;EACd,gBAAgB;;;EAGhB,sBAAsB;EACtB,+BAA+B;EAC/B,yBAAyB;EACzB,WAAW;EACX,SAAS;EACT,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;;AAGA;EACE,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,SAAS;EACT,UAAU;EACV,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;EAClB,gCAAgC;EAChC,mBAAmB;EACnB,UAAU;;EAEV,2CAA2C;EAC3C,oCAAoC;AACtC;;AAEA;EACE,UAAU;EACV,cAAc;EACd,8BAA8B;AAChC;;AAEA;EACE,aAAa;AACf;;;;;AAKA,aAAa;AACb,oBAAoB;AACpB;;;;;;GAMG;;;;;AAKH,wCAAwC;AACxC,8BAA8B;;AAE9B;;;;;;;;;;;;GAYG",sourcesContent:["html {\n  height: 100%;\n}\n\nbody {\n  /* background-color: #262421 */\n  /* background: rgb(15, 15, 15);\n  background: linear-gradient(95deg, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%); */\n\n  background: rgb(15, 15, 15);\n  background: linear-gradient(to bottom, rgba(15, 15, 15, 1) 0%, rgba(25, 25, 25, 1) 66%, rgba(52, 52, 52, 1) 100%);\n  height: 100%;\n  margin: 0;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  font: serif;\n}\n\n.interface{\n  /* used padding, instead of margin as I don't want website to be scrollable */\n  padding-top: 100px;\n\n  /* position: relative; */\n\n}\n\n.board-container{\n  display: flex;\n  align-items: flex-start;\n  /* align-items: stretch; */\n}\n\n#htmlBoard {\n  /* width: 35%; */\n  /* margin: 0 auto; */\n  flex: 1 0 13%;\n\n  /* margin-top: 100px; */\n}\n\n.progressbar {\n\n  margin-left: 100px;\n\n  /* height: 600px; */\n  align-self: stretch;\n\n\n  background-color: #000;\n  border-radius: 13px;\n  width: 20px;\n\n  /* try to only use the 180deg, 90deg, gets complex with the positioning */\n  transform: rotate(180deg);\n}\n\n.right-side{\n  margin-left: 400px;\n  flex: 1;\n\n  /* align-self: center; */\n  /* justify-content: center; */\n   /* align-items: center;      */\n  /* align-content: center;  */\n}\n\n\n/* .chessboard-63f37{\n  position: relative;\n} */\n\n.progress {\n  transition : height 1000ms ease-out;\n  background-color: #fff;\n\n  /* Adjust width using JS */\n  width: 20px;\n\n  /* also sets the hegiht of parent */\n  height: 50%;\n\n  border-radius: 10px;\n}\n\n\n.turn-container{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.chess-img{\n  /* display: block; */\n  /* margin: 0 auto; */\n}\n\n.player-turn-text{\n  color: white;\n  font-weight: bold;\n  font-family: 'Inter', sans-serif;\n  font-size: 12px;\n}\n\n.restart-btn{\n\n  /* background-color: white */\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;  \n  display:block;\n  width: 300px;\n  margin: 0 auto;\n  margin-top: 20px;\n\n\n  /* margin-top: 20px; */\n  /* background-color: #262421; */\n  background-color: #262524;\n  color: #999;\n  border: 0;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-bottom: 15px;\n}\n\n\n.restart-btn:hover{\n  background: #313030;\n}\n\n.winner-text{\n  /* margin-top: 200px; */\n  margin: 0;\n  color:#fff;\n  text-align: center;\n  font-weight: bold;\n  font-size: 48.83px;\n  font-family: 'Inter', sans-serif;\n  /* display: none; */\n  opacity: 0;\n\n  /* Transition for the opacity right above */\n  /* transition: opacity 1s ease-in; */ \n}\n\n.winner-text-active{\n  opacity: 1;\n  display: block;\n  transition: opacity 1s ease-in;\n}\n\n.hide{\n  display: none;\n}\n\n\n\n\n/* flex: 1; */\n/* flex: 0 1 auto; */\n/* .progressbar-container{\n  margin-left: 100px;\n  height: 500px;\n  background-color: rgb(159, 41, 41);\n\n  align-self: stretch;\n} */\n\n\n\n\n/* (height of inner div) / 2 + padding */\n/* transform-origin: 100% 0; */\n\n/* .progressbar {\n  background-color: black;\n  border-radius: 13px;\n  position: absolute;\n\n  padding: 3px;\n  transform:rotate(-90deg);\n\n  width: 300px;\n  height: 20px;\n  top: 0px;\n  right: 0px;\n} */\n\n\n\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);t&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},743:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bB.png"},68:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bK.png"},602:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bN.png"},817:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bP.png"},207:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bQ.png"},993:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/bR.png"},181:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wB.png"},902:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wK.png"},986:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wN.png"},998:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wP.png"},178:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wQ.png"},713:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=r.p+"img/chesspieces/wikipedia/wR.png"},379:e=>{"use strict";var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=t.base?c[0]+t.base:c[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var f=r(p),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)n[f].references++,n[f].updater(d);else{var h=o(d,t);t.byIndex=s,n.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var i=t(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);n[s].references--}for(var c=t(e,o),l=0;l<i.length;l++){var u=r(i[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=c}}},569:e=>{"use strict";var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{"use strict";e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return e[t](i,i.exports,r),i.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0,(()=>{"use strict";var e=r(379),n=r.n(e),t=r(795),o=r.n(t),i=r(569),a=r.n(i),s=r(565),c=r.n(s),l=r(216),u=r.n(l),p=r(589),f=r.n(p),d=r(816),h={};h.styleTagTransform=f(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),n()(d.Z,h),d.Z&&d.Z.locals&&d.Z.locals,r.p,r(768);const g="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",A=["1-0","0-1","1/2-1/2","*"],v={b:[16,32,17,15],w:[-16,-32,-17,-15]},b={n:[-18,-33,-31,-14,18,33,31,14],b:[-17,-15,17,15],r:[-16,1,16,-1],q:[-17,-16,-15,1,17,16,15,-1],k:[-17,-16,-15,1,17,16,15,-1]},m=[20,0,0,0,0,0,0,24,0,0,0,0,0,0,20,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,24,24,24,24,24,24,56,0,56,24,24,24,24,24,24,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,20,0,0,0,0,0,0,24,0,0,0,0,0,0,20],E=[17,0,0,0,0,0,0,16,0,0,0,0,0,0,15,0,0,17,0,0,0,0,0,16,0,0,0,0,0,15,0,0,0,0,17,0,0,0,0,16,0,0,0,0,15,0,0,0,0,0,0,17,0,0,0,16,0,0,0,15,0,0,0,0,0,0,0,0,17,0,0,16,0,0,15,0,0,0,0,0,0,0,0,0,0,17,0,16,0,15,0,0,0,0,0,0,0,0,0,0,0,0,17,16,15,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-15,-16,-17,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,-16,0,-17,0,0,0,0,0,0,0,0,0,0,-15,0,0,-16,0,0,-17,0,0,0,0,0,0,0,0,-15,0,0,0,-16,0,0,0,-17,0,0,0,0,0,0,-15,0,0,0,0,-16,0,0,0,0,-17,0,0,0,0,-15,0,0,0,0,0,-16,0,0,0,0,0,-17,0,0,-15,0,0,0,0,0,0,-16,0,0,0,0,0,0,-17],w={p:0,n:1,b:2,r:3,q:4,k:5},C={NORMAL:1,CAPTURE:2,BIG_PAWN:4,EP_CAPTURE:8,PROMOTION:16,KSIDE_CASTLE:32,QSIDE_CASTLE:64},y={a8:0,b8:1,c8:2,d8:3,e8:4,f8:5,g8:6,h8:7,a7:16,b7:17,c7:18,d7:19,e7:20,f7:21,g7:22,h7:23,a6:32,b6:33,c6:34,d6:35,e6:36,f6:37,g6:38,h6:39,a5:48,b5:49,c5:50,d5:51,e5:52,f5:53,g5:54,h5:55,a4:64,b4:65,c4:66,d4:67,e4:68,f4:69,g4:70,h4:71,a3:80,b3:81,c3:82,d3:83,e3:84,f3:85,g3:86,h3:87,a2:96,b2:97,c2:98,d2:99,e2:100,f2:101,g2:102,h2:103,a1:112,b1:113,c1:114,d1:115,e1:116,f1:117,g1:118,h1:119},B={w:[{square:y.a1,flag:C.QSIDE_CASTLE},{square:y.h1,flag:C.KSIDE_CASTLE}],b:[{square:y.a8,flag:C.QSIDE_CASTLE},{square:y.h8,flag:C.KSIDE_CASTLE}]};function x(e){var n=e.charAt(0);if(n>="a"&&n<="h"){if(e.match(/[a-h]\d.*[a-h]\d/))return;return N}return"o"===(n=n.toLowerCase())?j:n}function k(e){return e.replace(/=/,"").replace(/[+#]?[?!]*$/,"")}function S(e){return e>>4}function P(e){return 15&e}function T(e){var n=P(e),r=S(e);return"abcdefgh".substring(n,n+1)+"87654321".substring(r,r+1)}function _(e){return e===L?I:L}function O(e){var n=e instanceof Array?[]:{};for(var r in e)n[r]="object"==typeof r?O(e[r]):e[r];return n}function q(e){return e.replace(/^\s+|\s+$/g,"")}const I="b",L="w",R=-1,N="p",j="k",D=(function(){for(var e=[],n=y.a8;n<=y.h1;n++)136&n?n+=7:e.push(T(n))}(),{NORMAL:"n",CAPTURE:"c",BIG_PAWN:"b",EP_CAPTURE:"e",PROMOTION:"p",KSIDE_CASTLE:"k",QSIDE_CASTLE:"q"});var M=r(238),U={};U.styleTagTransform=f(),U.setAttributes=c(),U.insert=a().bind(null,"head"),U.domAPI=o(),U.insertStyleElement=u(),n()(M.Z,U),M.Z&&M.Z.locals&&M.Z.locals;const Q={p:100,n:280,b:320,r:479,q:929,k:6e4,k_e:6e4};var K={p:[[100,100,100,100,105,100,100,100],[78,83,86,73,102,82,85,90],[7,29,21,44,40,31,44,7],[-17,16,-2,15,14,0,15,-13],[-26,3,10,9,6,1,0,-23],[-22,9,5,-11,-10,-2,3,-19],[-31,8,-7,-37,-36,-14,3,-31],[0,0,0,0,0,0,0,0]],n:[[-66,-53,-75,-75,-10,-55,-58,-70],[-3,-6,100,-36,4,62,-4,-14],[10,67,1,74,73,27,62,-2],[24,24,45,37,33,41,25,17],[-1,5,31,21,22,35,2,0],[-18,10,13,22,18,15,11,-14],[-23,-15,2,0,2,0,-23,-20],[-74,-23,-26,-24,-19,-35,-22,-69]],b:[[-59,-78,-82,-76,-23,-107,-37,-50],[-11,20,35,-42,-39,31,2,-22],[-9,39,-32,41,52,-10,28,-14],[25,17,20,34,26,25,15,10],[13,10,17,23,17,16,0,7],[14,25,24,15,8,25,20,15],[19,20,11,6,7,6,20,16],[-7,2,-15,-12,-14,-15,-10,-10]],r:[[35,29,33,4,37,33,56,50],[55,29,56,67,55,62,34,60],[19,35,28,33,45,27,25,15],[0,5,16,13,18,-4,-9,-6],[-28,-35,-16,-21,-13,-29,-46,-30],[-42,-28,-42,-25,-25,-35,-26,-46],[-53,-38,-31,-26,-29,-43,-44,-53],[-30,-24,-18,5,-2,-18,-31,-32]],q:[[6,1,-8,-104,69,24,88,26],[14,32,60,-10,20,76,57,24],[-2,43,32,60,72,63,43,2],[1,-16,22,17,25,20,-13,-6],[-14,-15,-2,-5,-1,-10,-20,-22],[-30,-6,-13,-11,-16,-11,-16,-27],[-36,-18,0,-19,-15,-15,-21,-38],[-39,-30,-31,-13,-31,-36,-34,-42]],k:[[4,54,47,-99,-99,60,83,-62],[-32,10,55,56,56,55,10,3],[-62,12,-57,44,-67,28,37,-31],[-55,50,11,-4,-19,13,0,-49],[-55,-43,-52,-28,-51,-47,-8,-50],[-47,-42,-43,-79,-64,-32,-29,-32],[-4,3,-14,-50,-57,-18,13,4],[17,30,-3,-14,6,-1,40,18]],k_e:[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]]},W={p:K.p.slice().reverse(),n:K.n.slice().reverse(),b:K.b.slice().reverse(),r:K.r.slice().reverse(),q:K.q.slice().reverse(),k:K.k.slice().reverse(),k_e:K.k_e.slice().reverse()};(z=r(272)).keys().map(z);var z,H=null,Y=new function(e){var n=new Array(128),r={w:R,b:R},t=L,o={w:0,b:0},i=R,a=0,s=1,c=[],l={},u={};function p(e){void 0===e&&(e=!1),n=new Array(128),r={w:R,b:R},t=L,o={w:0,b:0},i=R,a=0,s=1,c=[],e||(l={}),u={},K(U())}function f(){for(var e=[],n={},r=function(e){e in u&&(n[e]=u[e])};c.length>0;)e.push(re());for(r(U());e.length>0;)ne(e.pop()),r(U());u=n}function d(){h(g)}function h(e,n){void 0===n&&(n=!1);var r=e.split(/\s+/),c=r[0],l=0;if(!M(e).valid)return!1;p(n);for(var u=0;u<c.length;u++){var f=c.charAt(u);if("/"===f)l+=8;else if(-1!=="0123456789".indexOf(f))l+=parseInt(f,10);else{var d=f<"a"?L:I;$({type:f.toLowerCase(),color:d},T(l)),l++}}return t=r[1],r[2].indexOf("K")>-1&&(o.w|=C.KSIDE_CASTLE),r[2].indexOf("Q")>-1&&(o.w|=C.QSIDE_CASTLE),r[2].indexOf("k")>-1&&(o.b|=C.KSIDE_CASTLE),r[2].indexOf("q")>-1&&(o.b|=C.QSIDE_CASTLE),i="-"===r[3]?R:y[r[3]],a=parseInt(r[4],10),s=parseInt(r[5],10),K(U()),!0}function M(e){var n=e.split(/\s+/);if(6!==n.length)return{valid:!1,error_number:1,error:"FEN string must contain six space-delimited fields."};if(isNaN(parseInt(n[5]))||parseInt(n[5],10)<=0)return{valid:!1,error_number:2,error:"6th field (move number) must be a positive integer."};if(isNaN(parseInt(n[4]))||parseInt(n[4],10)<0)return{valid:!1,error_number:3,error:"5th field (half move counter) must be a non-negative integer."};if(!/^(-|[abcdefgh][36])$/.test(n[3]))return{valid:!1,error_number:4,error:"4th field (en-passant square) is invalid."};if(!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(n[2]))return{valid:!1,error_number:5,error:"3rd field (castling availability) is invalid."};if(!/^(w|b)$/.test(n[1]))return{valid:!1,error_number:6,error:"2nd field (side to move) is invalid."};var r=n[0].split("/");if(8!==r.length)return{valid:!1,error_number:7,error:"1st field (piece positions) does not contain 8 '/'-delimited rows."};for(var t=0;t<r.length;t++){for(var o=0,i=!1,a=0;a<r[t].length;a++)if(isNaN(r[t][a])){if(!/^[prnbqkPRNBQK]$/.test(r[t][a]))return{valid:!1,error_number:9,error:"1st field (piece positions) is invalid [invalid piece]."};o+=1,i=!1}else{if(i)return{valid:!1,error_number:8,error:"1st field (piece positions) is invalid [consecutive numbers]."};o+=parseInt(r[t][a],10),i=!0}if(8!==o)return{valid:!1,error_number:10,error:"1st field (piece positions) is invalid [row too large]."}}return"3"==n[3][1]&&"w"==n[1]||"6"==n[3][1]&&"b"==n[1]?{valid:!1,error_number:11,error:"Illegal en-passant square"}:{valid:!0,error_number:0,error:"No errors."}}function U(){for(var e=0,r="",c=y.a8;c<=y.h1;c++){if(null==n[c])e++;else{e>0&&(r+=e,e=0);var l=n[c].color,u=n[c].type;r+=l===L?u.toUpperCase():u.toLowerCase()}c+1&136&&(e>0&&(r+=e),c!==y.h1&&(r+="/"),e=0,c+=8)}var p="";o[L]&C.KSIDE_CASTLE&&(p+="K"),o[L]&C.QSIDE_CASTLE&&(p+="Q"),o[I]&C.KSIDE_CASTLE&&(p+="k"),o[I]&C.QSIDE_CASTLE&&(p+="q"),p=p||"-";var f=i===R?"-":T(i);return[r,t,p,f,a,s].join(" ")}function Q(e){for(var n=0;n<e.length;n+=2)"string"==typeof e[n]&&"string"==typeof e[n+1]&&(l[e[n]]=e[n+1]);return l}function K(e){c.length>0||(e!==g?(l.SetUp="1",l.FEN=e):(delete l.SetUp,delete l.FEN))}function W(e){var r=n[y[e]];return r?{type:r.type,color:r.color}:null}function $(e,t){if(!("type"in e)||!("color"in e))return!1;if(-1==="pnbrqkPNBRQK".indexOf(e.type.toLowerCase()))return!1;if(!(t in y))return!1;var o=y[t];return(e.type!=j||r[e.color]==R||r[e.color]==o)&&(n[o]={type:e.type,color:e.color},e.type===j&&(r[e.color]=o),K(U()),!0)}function z(e,n,r,o,i){var a={color:t,from:n,to:r,flags:o,piece:e[n].type};return i&&(a.flags|=C.PROMOTION,a.promotion=i),e[r]?a.captured=e[r].type:o&C.EP_CAPTURE&&(a.captured=N),a}function H(e){function a(e,n,r,t,o){if(e[r].type!==N||0!==S(t)&&7!==S(t))n.push(z(e,r,t,o));else for(var i=["q","r","b","n"],a=0,s=i.length;a<s;a++)n.push(z(e,r,t,o,i[a]))}var s=[],c=t,l=_(c),u={b:1,w:6},p=y.a8,f=y.h1,d=!1,h=void 0===e||!("legal"in e)||e.legal,g=void 0===e||!("piece"in e)||"string"!=typeof e.piece||e.piece.toLowerCase();if(void 0!==e&&"square"in e){if(!(e.square in y))return[];p=f=y[e.square],d=!0}for(var A=p;A<=f;A++)if(136&A)A+=7;else{var m=n[A];if(null!=m&&m.color===c)if(m.type!==N||!0!==g&&g!==N){if(!0===g||g===m.type)for(var E=0,w=b[m.type].length;E<w;E++){var B=b[m.type][E];for(x=A;!(136&(x+=B));){if(null!=n[x]){if(n[x].color===c)break;a(n,s,A,x,C.CAPTURE);break}if(a(n,s,A,x,C.NORMAL),"n"===m.type||"k"===m.type)break}}}else{var x=A+v[c][0];if(null==n[x]){a(n,s,A,x,C.NORMAL);x=A+v[c][1];u[c]===S(A)&&null==n[x]&&a(n,s,A,x,C.BIG_PAWN)}for(E=2;E<4;E++)136&(x=A+v[c][E])||(null!=n[x]&&n[x].color===l?a(n,s,A,x,C.CAPTURE):x===i&&a(n,s,A,i,C.EP_CAPTURE))}}if(!(!0!==g&&g!==j||d&&f!==r[c])){if(o[c]&C.KSIDE_CASTLE){var k=(P=r[c])+2;null!=n[P+1]||null!=n[k]||G(l,r[c])||G(l,P+1)||G(l,k)||a(n,s,r[c],k,C.KSIDE_CASTLE)}var P;if(o[c]&C.QSIDE_CASTLE)k=(P=r[c])-2,null!=n[P-1]||null!=n[P-2]||null!=n[P-3]||G(l,r[c])||G(l,P-1)||G(l,k)||a(n,s,r[c],k,C.QSIDE_CASTLE)}if(!h)return s;var T=[];for(A=0,w=s.length;A<w;A++)ne(s[A]),X(c)||T.push(s[A]),re();return T}function Y(e,n){var r="";if(e.flags&C.KSIDE_CASTLE)r="O-O";else if(e.flags&C.QSIDE_CASTLE)r="O-O-O";else{if(e.piece!==N){var t=function(e,n){for(var r=e.from,t=e.to,o=e.piece,i=0,a=0,s=0,c=0,l=n.length;c<l;c++){var u=n[c].from,p=n[c].to;o===n[c].piece&&r!==u&&t===p&&(i++,S(r)===S(u)&&a++,P(r)===P(u)&&s++)}return i>0?a>0&&s>0?T(r):s>0?T(r).charAt(1):T(r).charAt(0):""}(e,n);r+=e.piece.toUpperCase()+t}e.flags&(C.CAPTURE|C.EP_CAPTURE)&&(e.piece===N&&(r+=T(e.from)[0]),r+="x"),r+=T(e.to),e.flags&C.PROMOTION&&(r+="="+e.promotion.toUpperCase())}return ne(e),Z()&&(F()?r+="#":r+="+"),re(),r}function G(e,r){for(var t=y.a8;t<=y.h1;t++)if(136&t)t+=7;else if(null!=n[t]&&n[t].color===e){var o=n[t],i=t-r,a=i+119;if(m[a]&1<<w[o.type]){if(o.type===N){if(i>0){if(o.color===L)return!0}else if(o.color===I)return!0;continue}if("n"===o.type||"k"===o.type)return!0;for(var s=E[a],c=t+s,l=!1;c!==r;){if(null!=n[c]){l=!0;break}c+=s}if(!l)return!0}}return!1}function X(e){return G(_(e),r[e])}function Z(){return X(t)}function F(){return Z()&&0===H().length}function J(){return!Z()&&0===H().length}function V(){for(var e={},r=[],t=0,o=0,i=y.a8;i<=y.h1;i++)if(o=(o+1)%2,136&i)i+=7;else{var a=n[i];a&&(e[a.type]=a.type in e?e[a.type]+1:1,"b"===a.type&&r.push(o),t++)}if(2===t)return!0;if(3===t&&(1===e.b||1===e.n))return!0;if(t===e.b+2){var s=0,c=r.length;for(i=0;i<c;i++)s+=r[i];if(0===s||s===c)return!0}return!1}function ee(){for(var e=[],n={},r=!1;;){var t=re();if(!t)break;e.push(t)}for(;;){var o=U().split(" ").slice(0,4).join(" ");if(n[o]=o in n?n[o]+1:1,n[o]>=3&&(r=!0),!e.length)break;ne(e.pop())}return r}function ne(e){var l=t,u=_(l);if(function(e){c.push({move:e,kings:{b:r.b,w:r.w},turn:t,castling:{b:o.b,w:o.w},ep_square:i,half_moves:a,move_number:s})}(e),n[e.to]=n[e.from],n[e.from]=null,e.flags&C.EP_CAPTURE&&(t===I?n[e.to-16]=null:n[e.to+16]=null),e.flags&C.PROMOTION&&(n[e.to]={type:e.promotion,color:l}),n[e.to].type===j){if(r[n[e.to].color]=e.to,e.flags&C.KSIDE_CASTLE){var p=e.to-1,f=e.to+1;n[p]=n[f],n[f]=null}else e.flags&C.QSIDE_CASTLE&&(p=e.to+1,f=e.to-2,n[p]=n[f],n[f]=null);o[l]=""}if(o[l])for(var d=0,h=B[l].length;d<h;d++)if(e.from===B[l][d].square&&o[l]&B[l][d].flag){o[l]^=B[l][d].flag;break}if(o[u])for(d=0,h=B[u].length;d<h;d++)if(e.to===B[u][d].square&&o[u]&B[u][d].flag){o[u]^=B[u][d].flag;break}i=e.flags&C.BIG_PAWN?"b"===t?e.to-16:e.to+16:R,e.piece===N||e.flags&(C.CAPTURE|C.EP_CAPTURE)?a=0:a++,t===I&&s++,t=_(t)}function re(){var e=c.pop();if(null==e)return null;var l=e.move;r=e.kings,t=e.turn,o=e.castling,i=e.ep_square,a=e.half_moves,s=e.move_number;var u,p,f=t,d=_(t);if(n[l.from]=n[l.to],n[l.from].type=l.piece,n[l.to]=null,l.flags&C.CAPTURE)n[l.to]={type:l.captured,color:d};else if(l.flags&C.EP_CAPTURE){var h;h=f===I?l.to-16:l.to+16,n[h]={type:N,color:d}}return l.flags&(C.KSIDE_CASTLE|C.QSIDE_CASTLE)&&(l.flags&C.KSIDE_CASTLE?(u=l.to+1,p=l.to-1):l.flags&C.QSIDE_CASTLE&&(u=l.to-2,p=l.to+1),n[u]=n[p],n[p]=null),l}function te(e,n){for(var r=k(e),t=0;t<2;t++){if(1==t){if(!n)return null;var o=!1;if(l=r.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/)){var i=l[1],a=l[2],s=l[3],c=l[4];1==a.length&&(o=!0)}else{var l;(l=r.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/))&&(i=l[1],a=l[2],s=l[3],c=l[4],1==a.length&&(o=!0))}}for(var u=x(r),p=H({legal:!0,piece:i||u}),f=0,d=p.length;f<d;f++)switch(t){case 0:if(r===k(Y(p[f],p)))return p[f];break;case 1:if(l){if(!(i&&i.toLowerCase()!=p[f].piece||y[a]!=p[f].from||y[s]!=p[f].to||c&&c.toLowerCase()!=p[f].promotion))return p[f];if(o){var h=T(p[f].from);if(!(i&&i.toLowerCase()!=p[f].piece||y[s]!=p[f].to||a!=h[0]&&a!=h[1]||c&&c.toLowerCase()!=p[f].promotion))return p[f]}}}}return null}function oe(e){var n=O(e);n.san=Y(n,H({legal:!0})),n.to=T(n.to),n.from=T(n.from);var r="";for(var t in C)C[t]&n.flags&&(r+=D[t]);return n.flags=r,n}function ie(e){for(var n=H({legal:!1}),r=0,o=t,i=0,a=n.length;i<a;i++)ne(n[i]),X(o)||(e-1>0?r+=ie(e-1):r++),re();return r}return h(g),{load:function(e){return h(e)},reset:function(){return d()},moves:function(e){for(var n=H(e),r=[],t=0,o=n.length;t<o;t++)void 0!==e&&"verbose"in e&&e.verbose?r.push(oe(n[t])):r.push(Y(n[t],H({legal:!0})));return r},in_check:function(){return Z()},in_checkmate:function(){return F()},in_stalemate:function(){return J()},in_draw:function(){return a>=100||J()||V()||ee()},insufficient_material:function(){return V()},in_threefold_repetition:function(){return ee()},game_over:function(){return a>=100||F()||J()||V()||ee()},validate_fen:function(e){return M(e)},fen:function(){return U()},board:function(){for(var e=[],r=[],t=y.a8;t<=y.h1;t++)null==n[t]?r.push(null):r.push({square:T(t),type:n[t].type,color:n[t].color}),t+1&136&&(e.push(r),r=[],t+=8);return e},pgn:function(e){var n="object"==typeof e&&"string"==typeof e.newline_char?e.newline_char:"\n",r="object"==typeof e&&"number"==typeof e.max_width?e.max_width:0,t=[],o=!1;for(var i in l)t.push("["+i+' "'+l[i]+'"]'+n),o=!0;o&&c.length&&t.push(n);for(var a=function(e){var n=u[U()];return void 0!==n&&(e=`${e}${e.length>0?" ":""}{${n}}`),e},p=[];c.length>0;)p.push(re());var f=[],d="";for(0===p.length&&f.push(a(""));p.length>0;){d=a(d);var h=p.pop();c.length||"b"!==h.color?"w"===h.color&&(d.length&&f.push(d),d=s+"."):d=s+". ...",d=d+" "+Y(h,H({legal:!0})),ne(h)}if(d.length&&f.push(a(d)),void 0!==l.Result&&f.push(l.Result),0===r)return t.join("")+f.join(" ");var g=function(){return t.length>0&&" "===t[t.length-1]&&(t.pop(),!0)},A=function(e,o){for(var i of o.split(" "))if(i){if(e+i.length>r){for(;g();)e--;t.push(n),e=0}t.push(i),e+=i.length,t.push(" "),e++}return g()&&e--,e},v=0;for(i=0;i<f.length;i++)v+f[i].length>r&&f[i].includes("{")?v=A(v,f[i]):(v+f[i].length>r&&0!==i?(" "===t[t.length-1]&&t.pop(),t.push(n),v=0):0!==i&&(t.push(" "),v++),t.push(f[i]),v+=f[i].length);return t.join("")},load_pgn:function(e,n){var r=void 0!==n&&"sloppy"in n&&n.sloppy;function t(e){return e.replace(/\\/g,"\\")}e=e.trim();var o="object"==typeof n&&"string"==typeof n.newline_char?n.newline_char:"\r?\n",i=new RegExp("^(\\[((?:"+t(o)+")|.)*\\])(?:\\s*"+t(o)+"){2}"),a=i.test(e)?i.exec(e)[1]:"";d();var s=function(e,n){for(var r="object"==typeof n&&"string"==typeof n.newline_char?n.newline_char:"\r?\n",o={},i=e.split(new RegExp(t(r))),a="",s="",c=0;c<i.length;c++){var l=/^\s*\[([A-Za-z]+)\s*"(.*)"\s*\]\s*$/;a=i[c].replace(l,"$1"),s=i[c].replace(l,"$2"),q(a).length>0&&(o[a]=s)}return o}(a,n),c="";for(var p in s)"fen"===p.toLowerCase()&&(c=s[p]),Q([p,s[p]]);if(r){if(c&&!h(c,!0))return!1}else if(!("1"!==s.SetUp||"FEN"in s&&h(s.FEN,!0)))return!1;for(var f=function(e){return`{${function(e){return Array.from(e).map((function(e){return e.charCodeAt(0)<128?e.charCodeAt(0).toString(16):encodeURIComponent(e).replace(/\%/g,"").toLowerCase()})).join("")}((e=e.replace(new RegExp(t(o),"g")," ")).slice(1,e.length-1))}}`},g=function(e){if(e.startsWith("{")&&e.endsWith("}"))return function(e){return 0==e.length?"":decodeURIComponent("%"+e.match(/.{1,2}/g).join("%"))}(e.slice(1,e.length-1))},v=e.replace(a,"").replace(new RegExp(`({[^}]*})+?|;([^${t(o)}]*)`,"g"),(function(e,n,r){return void 0!==n?f(n):" "+f(`{${r.slice(1)}}`)})).replace(new RegExp(t(o),"g")," "),b=/(\([^\(\)]+\))+?/g;b.test(v);)v=v.replace(b,"");var m=q(v=(v=(v=v.replace(/\d+\.(\.\.)?/g,"")).replace(/\.\.\./g,"")).replace(/\$\d+/g,"")).split(new RegExp(/\s+/));m=m.join(",").replace(/,,+/g,",").split(",");for(var E="",w="",C=0;C<m.length;C++){var y=g(m[C]);if(void 0===y)if(null==(E=te(m[C],r))){if(!(A.indexOf(m[C])>-1))return!1;w=m[C]}else w="",ne(E);else u[U()]=y}return w&&Object.keys(l).length&&!l.Result&&Q(["Result",w]),!0},header:function(){return Q(arguments)},turn:function(){return t},move:function(e,n){var r=void 0!==n&&"sloppy"in n&&n.sloppy,t=null;if("string"==typeof e)t=te(e,r);else if("object"==typeof e)for(var o=H(),i=0,a=o.length;i<a;i++)if(e.from===T(o[i].from)&&e.to===T(o[i].to)&&(!("promotion"in o[i])||e.promotion===o[i].promotion)){t=o[i];break}if(!t)return null;var s=oe(t);return ne(t),s},undo:function(){var e=re();return e?oe(e):null},clear:function(){return p()},put:function(e,n){return $(e,n)},get:function(e){return W(e)},ascii(){for(var e="   +------------------------+\n",r=y.a8;r<=y.h1;r++){if(0===P(r)&&(e+=" "+"87654321"[S(r)]+" |"),null==n[r])e+=" . ";else{var t=n[r].type;e+=" "+(n[r].color===L?t.toUpperCase():t.toLowerCase())+" "}r+1&136&&(e+="|\n",r+=8)}return(e+="   +------------------------+\n")+"     a  b  c  d  e  f  g  h"},remove:function(e){return function(e){var t=W(e);return n[y[e]]=null,t&&t.type===j&&(r[t.color]=R),K(U()),t}(e)},perft:function(e){return ie(e)},square_color:function(e){if(e in y){var n=y[e];return(S(n)+P(n))%2==0?"light":"dark"}return null},history:function(e){for(var n=[],r=[],t=(void 0!==e&&"verbose"in e&&e.verbose);c.length>0;)n.push(re());for(;n.length>0;){var o=n.pop();t?r.push(oe(o)):r.push(Y(o,H({legal:!0}))),ne(o)}return r},get_comment:function(){return u[U()]},set_comment:function(e){u[U()]=e.replace("{","[").replace("}","]")},delete_comment:function(){var e=u[U()];return delete u[U()],e},get_comments:function(){return f(),Object.keys(u).map((function(e){return{fen:e,comment:u[e]}}))},delete_comments:function(){return f(),Object.keys(u).map((function(e){var n=u[e];return delete u[e],{fen:e,comment:n}}))}}};const G=document.querySelector(".progress"),X=document.querySelector(".winner-text"),Z=document.querySelector(".player-turn-text"),F=document.querySelector(".white-king"),J=document.querySelector(".black-king");function V(){$("#htmlBoard .square-55d63").css("background-color","")}function ee(e){var n=$("#htmlBoard .square-"+e),r="#a9a9a9";n.hasClass("black-3c85d")&&(r="#696969"),n.css("background-color",r)}function ne(){const e=Y.moves();if(0!==e.length){var n=Math.floor(Math.random()*e.length);Y.move(e[n]),H.position(Y.fen()),re()}}function re(){let e=(function(e,n){let r=0;if(e.in_checkmate()){if("w"===n)return-(10**10);if("b"===n)return 10**10}return e.in_draw()||e.in_threefold_repetition()||e.in_stalemate()?0:(e.in_check()&&("w"===n&&(r-=50),"b"===n&&(r+=50)),r+=function(e){let n=0;for(let r=0;r<e.length;r++){let t=0;for(let o=0;o<e[r].length;o++){const i=e[r][o];i===i.toUpperCase()&&isNaN(i)&&(n+=Q[i.toLowerCase()],n+=K[i.toLowerCase()][r][t]),i===i.toLowerCase()&&isNaN(i)&&(n-=Q[i.toLowerCase()],n-=W[i.toLowerCase()][r][t]),i===!isNaN(i)?t+=i:t++}}return n}(e.fen().split(/([^\s]+)/)[1].split("/")),r)}(Y,Y.turn())- -3887)/7774*100;if(e>100&&(e=100),e<0&&(e=0),G.style.height=`${e}%`,Y.in_checkmate())return X.classList.add("winner-text-active"),"w"===Y.turn()&&(X.innerHTML="Black Wins!"),"b"===Y.turn()&&(X.innerHTML="White Wins!"),F.classList.add("hide"),J.classList.add("hide"),void Z.classList.add("hide");(Y.in_draw()||Y.in_threefold_repetition()||Y.in_stalemate())&&(X.innerHTML="Draw!",F.classList.add("hide"),J.classList.remove("hide")),"w"===Y.turn()&&(Z.innerHTML="White's<br>Turn",F.classList.remove("hide"),J.classList.add("hide")),"b"===Y.turn()&&(Z.innerHTML="Black's<br>Turn",J.classList.remove("hide"),F.classList.add("hide"))}var te={draggable:!0,position:"start",onDragStart:function(e,n){return!Y.game_over()&&!("w"===Y.turn()&&-1!==n.search(/^b/)||"b"===Y.turn()&&-1!==n.search(/^w/))&&void 0},onDrop:function(e,n){if(V(),null===Y.move({from:e,to:n,promotion:"q"}))return"snapback";window.setTimeout(ne,250)},onMouseoverSquare:function(e,n){var r=Y.moves({square:e,verbose:!0});if(0!==r.length){ee(e);for(var t=0;t<r.length;t++)ee(r[t].to)}},onMouseoutSquare:function(e,n){V()},onSnapEnd:function(){re(),H.position(Y.fen())}};H=Chessboard("htmlBoard",te)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,